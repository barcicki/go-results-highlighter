{
  "version": 3,
  "sources": [
    "node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js",
    "src\\index.js",
    "src\\lib\\highlighter.js",
    "src\\lib\\parser.js",
    "src\\lib\\raw2table.js",
    "src\\lib\\settings.js",
    "src\\lib\\utils.js",
    "src\\lib\\wrapper.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "go-results-highlighter",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\r\n\r\nimport GoResultsHighlighter from './lib/wrapper';\r\nimport {DOM_ATTRIBUTES} from './lib/settings';\r\nimport {asArray} from './lib/utils';\r\n\r\n/**\r\n * Registers goResultsHighlighter plugin in jQuery\r\n */\r\nfunction registerJQueryPlugin() {\r\n    jQuery.fn.goResultsHighlighter = function jQueryHighlighterWrapper(options) {\r\n        this.each((index, element) => {\r\n            const highlighter = new GoResultsHighlighter(element, options);\r\n\r\n            $(highlighter.element).data('GoResultsHighlighter', highlighter);\r\n        });\r\n        return this;\r\n    };\r\n}\r\n\r\n/**\r\n * Runs the highlighter on existing tables\r\n */\r\nfunction initialize() {\r\n    const elementsWithResults = document.querySelectorAll(`[${DOM_ATTRIBUTES.RESULT_TABLE}]`);\r\n\r\n    if (typeof jQuery !== 'undefined') {\r\n\r\n        if (!jQuery.fn.goResultsHighlighter) {\r\n            registerJQueryPlugin();\r\n        }\r\n\r\n        jQuery(elementsWithResults).goResultsHighlighter();\r\n\r\n    } else {\r\n        asArray(elementsWithResults)\r\n            .forEach(tableEl => new GoResultsHighlighter(tableEl));\r\n    }\r\n}\r\n\r\n// if the website is already fully loaded proceed with initialisation\r\nif (document.readyState === 'complete') {\r\n    initialize();\r\n\r\n// otherwise ...\r\n} else {\r\n\r\n    // check for jQuery and register the plugin at first to make sure that it will be available\r\n    // before any $(document).ready calls\r\n    if (typeof jQuery !== 'undefined') {\r\n        registerJQueryPlugin();\r\n    }\r\n\r\n    document.addEventListener('DOMContentLoaded', initialize, false);\r\n}\r\n\r\nmodule.exports = GoResultsHighlighter;",
    "'use strict';\r\n\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toPrefixedClasses, readTableSettingsFromDOM } from './settings';\r\nimport parse from './parser';\r\nimport convert from './raw2table';\r\nimport { asArray, defaults } from './utils';\r\n\r\nexport default class GoResultsHighlighter {\r\n\r\n    /**\r\n     * Creates new instance of GoResultsHighlighter\r\n     *\r\n     * @param {HTMLElement|Node} element - main element containing table with results\r\n     * @param {HighlighterSettings} [settings] - plugin settings\r\n     */\r\n    constructor(element, settings) {\r\n        this.settings = defaults(DEFAULT_SETTINGS, readTableSettingsFromDOM(element), settings);\r\n\r\n        if (element instanceof HTMLPreElement) {\r\n            let table = convert(element.innerHTML, settings);\r\n            let parent = element.parentNode;\r\n\r\n            parent.insertBefore(table, element);\r\n            parent.removeChild(element);\r\n\r\n            this.element = table;\r\n        } else {\r\n            this.element = element;\r\n        }\r\n\r\n        if (!this.element.classList) {\r\n            // not supported\r\n            return;\r\n        }\r\n\r\n        this.createPlayersMap();\r\n        this.bindEvents();\r\n\r\n        this.element.classList.add(this.settings.prefixCls + this.settings.tableCls);\r\n\r\n        this.current = null;\r\n        this.games = [];\r\n        this.isRearranged = false;\r\n        this.isHighlighting = false;\r\n    }\r\n\r\n    /**\r\n     * Creates players map\r\n     */\r\n    createPlayersMap() {\r\n        this.map = parse(this.element, this.settings);\r\n        this.players = [];\r\n\r\n        for (let placement in this.map) {\r\n            if (this.map.hasOwnProperty(placement)) {\r\n                this.players.push(this.map[placement]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks player and his opponents highlighted.\r\n     * @param {object|null} [settings] - highlighting settings or player to be highlighted\r\n     * @param {number} [settings.player] - player whose opponents should be\r\n     * highlighted\r\n     * @param {boolean} [settings.rearrange=false] - whether the table should be\r\n     * rearranged to display results in compact size\r\n     * @param {Array.<number>} [settings.games] - the opponent whose game with the\r\n     * player should be highlighted\r\n     */\r\n    highlight(settings) {\r\n        if (!settings) {\r\n            settings = {};\r\n        }\r\n\r\n        let playerPlace = settings.player;\r\n        let rearrange = settings.rearrange === true;\r\n        let gamesToHighlight = settings.games;\r\n\r\n        const player = this.map[playerPlace];\r\n        const classes = toPrefixedClasses(this.settings);\r\n\r\n        // if table is already rearranged then transform it back to default state\r\n        if (this.isRearranged) {\r\n            restoreNaturalOrder(this.players);\r\n        }\r\n\r\n        // rearrange the table if player and appropriate setting is provided\r\n        if (player && rearrange) {\r\n            rearrangeOrder(player, player.opponents.map((opponentPlace) => this.map[opponentPlace]));\r\n\r\n            this.element.classList.add(classes.rearrangedCls);\r\n            this.isRearranged = true;\r\n        } else {\r\n            this.element.classList.remove(classes.rearrangedCls);\r\n            this.isRearranged = false;\r\n        }\r\n\r\n        const markedGames = asArray(this.element.querySelectorAll('.' + classes.gameCls));\r\n        const markedRow = this.element.querySelector('.' + classes.currentCls);\r\n        const markedRowPlacement = markedRow ? markedRow.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT) : null;\r\n        const markedPlayer = markedRowPlacement ? this.map[markedRowPlacement] : null;\r\n        const mark = (player, active) => {\r\n            const method = active ? 'add' : 'remove';\r\n\r\n            player.row.classList[method](classes.currentCls);\r\n\r\n            player.opponents.forEach((opponentPlace) => {\r\n                let opponent = this.map[opponentPlace];\r\n\r\n                opponent.row.classList[method](this.settings.prefixCls + player.games[opponentPlace].cls);\r\n            });\r\n        };\r\n\r\n        // remove any visible game markings\r\n        markedGames.forEach((gameCell) => {\r\n            gameCell.classList.remove(classes.gameCls);\r\n        });\r\n\r\n        // unmark player if necessary\r\n        if (markedPlayer && markedPlayer !== player) {\r\n            mark(markedPlayer, false);\r\n        }\r\n\r\n        // mark the player if not already marked\r\n        if (player && player !== markedPlayer) {\r\n            mark(player, true);\r\n        }\r\n\r\n        // clear list of highlighted games\r\n        this.games.length = 0;\r\n\r\n        if (player) {\r\n            if (typeof gamesToHighlight === 'number') {\r\n                gamesToHighlight = [gamesToHighlight];\r\n            }\r\n\r\n            if (gamesToHighlight && typeof gamesToHighlight.length === 'number') {\r\n                gamesToHighlight.forEach((opponentPlace) => {\r\n                    let opponent = this.map[opponentPlace];\r\n                    let game = player.games[opponentPlace];\r\n\r\n                    if (opponent && game) {\r\n                        game.cell.classList.add(classes.gameCls);\r\n                        opponent.games[playerPlace].cell.classList.add(classes.gameCls);\r\n                        this.games.push(opponentPlace);\r\n                    }\r\n                });\r\n            } else if (this.isRearranged) {\r\n                player.opponents.forEach((opponent) => {\r\n                    this.map[opponent].games[playerPlace].cell.classList.add(classes.gameCls);\r\n                    this.games.push(opponent);\r\n                });\r\n            }\r\n\r\n            this.current = playerPlace;\r\n            this.isHighlighting = true;\r\n        } else {\r\n            this.current = null;\r\n            this.isHighlighting = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change settings\r\n     * @param {HighlighterSettings} settings\r\n     */\r\n    configure(settings) {\r\n\r\n        // remove any highlighting\r\n        this.highlight(null);\r\n\r\n        // remove class name added to the table\r\n        this.element.classList.remove(this.settings.prefixCls + this.settings.tableCls);\r\n\r\n        // update settings\r\n        this.settings = defaults(this.settings, settings);\r\n\r\n        // create new player map (parse rows)\r\n        this.createPlayersMap();\r\n\r\n        // add new class name to the table\r\n        this.element.classList.add(this.settings.prefixCls + this.settings.tableCls);\r\n    }\r\n\r\n    /**\r\n     * Binds touchend, click, mouseover and mouseout events listeners to the element.\r\n     */\r\n    bindEvents() {\r\n        let hasTouchMoved = false;\r\n\r\n        this.element.addEventListener('touchstart', () => {\r\n            hasTouchMoved = false;\r\n        });\r\n\r\n        this.element.addEventListener('touchmove', () => {\r\n            hasTouchMoved = true;\r\n        });\r\n\r\n        this.element.addEventListener('touchend', (event) => {\r\n            if (hasTouchMoved || (this.settings.rearranging === false && this.settings.hovering === false)) {\r\n                return;\r\n            }\r\n\r\n            let { target, player, games } = fetchInformationAboutTarget(event.target);\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            let rearrange = false;\r\n            let lastTargetPos;\r\n\r\n            if (this.current === player) {\r\n                if (!this.settings.rearranging || !this.settings.hovering) {\r\n                    player = null;\r\n                }\r\n                rearrange = !this.isRearranged;\r\n\r\n            } else if (this.isRearranged || !this.settings.hovering) {\r\n                rearrange = true;\r\n            }\r\n\r\n            if (rearrange) {\r\n                lastTargetPos = target.getBoundingClientRect().top;\r\n            }\r\n\r\n            this.highlight({ player, games, rearrange });\r\n\r\n            if (lastTargetPos) {\r\n                updateTopPosition(target, lastTargetPos);\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.element.addEventListener('click', (event) => {\r\n            if (this.settings.rearranging === false) {\r\n                return;\r\n            }\r\n\r\n            let { target, player, games } = fetchInformationAboutTarget(event.target);\r\n            let rearrange = false;\r\n            let lastTargetPos;\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            if (!this.isRearranged || target.properNextSibling) {\r\n                rearrange = true;\r\n\r\n            } else if (!this.settings.hovering) {\r\n                player = null;\r\n            }\r\n\r\n            if (rearrange) {\r\n                lastTargetPos = target.getBoundingClientRect().top;\r\n            }\r\n\r\n            this.highlight({ player, games, rearrange });\r\n\r\n            if (lastTargetPos) {\r\n                updateTopPosition(target, lastTargetPos);\r\n            }\r\n        });\r\n\r\n        this.element.addEventListener('mouseover', (event) => {\r\n            if (this.settings.hovering === false) {\r\n                return;\r\n            }\r\n\r\n            let { player, games } = fetchInformationAboutTarget(event.target);\r\n            let rearrange = this.isRearranged;\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            if (this.isRearranged) {\r\n                if ((!games || player !== this.current) && this.games.length === this.map[this.current].opponents.length) {\r\n                    return;\r\n                }\r\n\r\n                if (player !== this.current) {\r\n                    player = this.current;\r\n                    games = null;\r\n                }\r\n            }\r\n\r\n            this.highlight({ player, rearrange, games });\r\n        }, false);\r\n\r\n        this.element.addEventListener('mouseout', (event) => {\r\n            if (this.settings.hovering === false) {\r\n                return;\r\n            }\r\n\r\n            let target = event.relatedTarget;\r\n\r\n            while (target && target !== document && target !== this.element) {\r\n                target = target.parentNode;\r\n            }\r\n\r\n            // if new hovered element is outside the table then remove all\r\n            // selections unless the table is rearranged - then only highlight\r\n            // all games\r\n            if (target !== this.element) {\r\n                if (this.isRearranged && this.games.length !== this.map[this.current].opponents.length) {\r\n                    this.highlight({ player: this.current, rearrange: true });\r\n                } else if (!this.isRearranged) {\r\n                    this.highlight(null);\r\n                }\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    /**\r\n     * Removes inline styles from player rows and their children.\r\n     */\r\n    clearInlineStyles() {\r\n        this.players.forEach(player => {\r\n            // player.row.removeAttribute('style');\r\n            asArray(player.row.childNodes).forEach(child => child.removeAttribute('style'));\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Compare current target's top position with previous value and scroll window\r\n * to previous value if it differs\r\n * @param {HTMLElement|Node} target\r\n * @param {number} previousTop\r\n */\r\nfunction updateTopPosition(target, previousTop) {\r\n    let diff = target.getBoundingClientRect().top - previousTop;\r\n\r\n    if (Math.abs(diff) > 10) {\r\n        window.scrollBy(0, diff);\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves information about player and opponent placement from provided element\r\n * or its parents. Returns also the row with player placement information.\r\n * @param {HTMLElement|Node} target - target of the event\r\n * @returns {object}\r\n */\r\nfunction fetchInformationAboutTarget(target) {\r\n    var result = {\r\n        player: null,\r\n        games: null,\r\n        target: null\r\n    };\r\n\r\n    // fetch information about hovered element\r\n    while (target && target !== document) {\r\n        let opponentGridPlacement = target.getAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT);\r\n        let playerGridPlacement = target.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT);\r\n\r\n        // game cell?\r\n        if (opponentGridPlacement) {\r\n            result.games = Number(opponentGridPlacement);\r\n        }\r\n\r\n        // player row? no further search is necessary\r\n        if (playerGridPlacement) {\r\n            result.player = Number(playerGridPlacement);\r\n            break;\r\n        }\r\n\r\n        target = target.parentNode;\r\n    }\r\n\r\n    result.target = target;\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Restores default order of rows in the table\r\n * @param {Array.<object>} players - list of mapping data for all rows\r\n */\r\nfunction restoreNaturalOrder(players) {\r\n    players\r\n        .filter((player) => player.row.properNextSibling)\r\n        .reverse()\r\n        .forEach((player) => {\r\n            if (player.row.properNextSibling === -1) {\r\n                player.row.parentNode.appendChild(player.row);\r\n            } else {\r\n                player.row.parentNode.insertBefore(player.row, player.row.properNextSibling);\r\n            }\r\n            player.row.properNextSibling = null;\r\n        });\r\n}\r\n\r\n/**\r\n * Rearranges the rows in a table\r\n * @param {object} player - player mapping data\r\n * @param {Array.<object>} opponents - list of opponents mapping data\r\n */\r\nfunction rearrangeOrder(player, opponents) {\r\n    const parent = player.row.parentNode;\r\n    let after = player.row.nextElementSibling;\r\n\r\n    opponents.forEach((opponent) => {\r\n        opponent.row.properNextSibling = opponent.row.nextElementSibling || -1;\r\n\r\n        if (opponent.tournamentPlace < player.tournamentPlace) {\r\n            parent.insertBefore(opponent.row, player.row);\r\n        } else {\r\n            parent.insertBefore(opponent.row, after);\r\n            after = opponent.row.nextElementSibling;\r\n        }\r\n    });\r\n}\r\n\r\nGoResultsHighlighter.DEFAULT_SETTINGS = DEFAULT_SETTINGS;\r\n",
    "'use strict';\r\n\r\nimport { asArray, defaults } from './utils';\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toResultsWithRegExp } from './settings';\r\n\r\nfunction writeGridPlacement(row, placement) {\r\n    row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, placement);\r\n}\r\n\r\n/**\r\n * Returns array of columns (array of cell values in the column) from given list of rows.\r\n *\r\n * @param {Array.<Element|HTMLElement>} rows\r\n * @param {string} cellSelector\r\n * @returns {Array.<Array.<string>>}\r\n */\r\nfunction getColumnsFromRows(rows, cellSelector) {\r\n    return rows.reduce((columns, row) => {\r\n        asArray(row.querySelectorAll(cellSelector))\r\n            .forEach((cell, index) => {\r\n                let column = columns[index];\r\n\r\n                if (!column) {\r\n                    column = [];\r\n                    columns[index] = column;\r\n                }\r\n\r\n                column.push(cell.textContent);\r\n            });\r\n\r\n        return columns;\r\n    }, []);\r\n}\r\n\r\n/**\r\n * From given set of strings it returns the ones that look like Go results.\r\n *\r\n * @param {Array.<string>} items\r\n * @param {Array.<ResultMapping>} resultsMap\r\n * @returns {Array.<string>}\r\n */\r\nfunction getItemsWithGoResults(items, resultsMap) {\r\n    return items.filter(cell => resultsMap.some(result => cell.match(result.regexp)));\r\n}\r\n\r\n/**\r\n * Checks if at least 40% of strings from given set look like Go results.\r\n * Why 40%? This value allowed to eliminate some sneaky columns from OpenGotha results where \"=\" is\r\n * used to show halves and is interpreted as jigo result by Highlighter. If the value is too high\r\n * then it is likely that large tournament results (like congress) will be not parsed correctly\r\n * as many people drop/skip rounds.\r\n *\r\n * @param {Array.<string>} items\r\n * @param {Array.<ResultMapping>} resultsMap\r\n * @returns {boolean}\r\n */\r\nfunction checkItemsForResults(items, resultsMap) {\r\n    const count = items.length;\r\n    const itemsWithResultsCount = getItemsWithGoResults(items, resultsMap).length;\r\n\r\n    return itemsWithResultsCount / count >= 0.4;\r\n}\r\n\r\n/**\r\n * Returns the array of indexes of columns that look like keeping Go results.\r\n *\r\n * @param {Array.<Element|HTMLElement>} rows\r\n * @param {string} cellSelector\r\n * @param {Array.<ResultMapping>} resultsMap\r\n * @returns {Array.<number>}\r\n */\r\nfunction getIndexesOfColumnsWithResultsFromRows(rows, cellSelector, resultsMap) {\r\n    return getColumnsFromRows(rows, cellSelector)\r\n        .reduce((indexes, column, index) => {\r\n            if (checkItemsForResults(column, resultsMap)) {\r\n                indexes.push(index);\r\n            }\r\n\r\n            return indexes;\r\n        }, []);\r\n}\r\n\r\n/**\r\n * Creates filter function which returns items from provided list of indexes.\r\n *\r\n * @param {Array.<number>} columnsIndexes\r\n * @returns {function(*, *=): boolean}\r\n */\r\nfunction createCellFromColumnsFilter(columnsIndexes) {\r\n    return (cell, index) => columnsIndexes.indexOf(index) !== -1;\r\n}\r\n\r\n/**\r\n * Returns the array of indexes of columns with Go results based on settings.\r\n *\r\n * @param {Array.<Element|HTMLElement>} rows\r\n * @param {HighlighterSettings} settings\r\n * @param {Array.<ResultMapping>} resultsMap\r\n * @returns {function(*, *=): boolean}\r\n */\r\nfunction getFilterForColumnsWithResults(rows, settings, resultsMap) {\r\n    if (typeof settings.roundsColumns === 'string') {\r\n        const  indexes = settings.roundsColumns.split(',').map(Number);\r\n\r\n        return createCellFromColumnsFilter(indexes);\r\n    }\r\n\r\n    // check is disabled - return all columns\r\n    if (!settings.checkColumnsForResults) {\r\n        return () => true;\r\n    }\r\n\r\n    const  indexes = getIndexesOfColumnsWithResultsFromRows(rows, settings.cellTags, resultsMap);\r\n\r\n    return createCellFromColumnsFilter(indexes);\r\n}\r\n\r\n/**\r\n * Traverses provided table and creates results map.\r\n *\r\n * @param {Element|HTMLElement} table - table results container\r\n * @param {HighlighterSettings} [config] - settings for parser\r\n * @returns {object}\r\n */\r\nexport default function parse(table, config) {\r\n    const settings = defaults(DEFAULT_SETTINGS, config);\r\n    const rows = asArray(table.querySelectorAll(settings.rowTags));\r\n    const resultsMap = toResultsWithRegExp(settings.results);\r\n    const resultsMapCount = resultsMap.length;\r\n    const columnsWithResultsFilter = getFilterForColumnsWithResults(rows, settings, resultsMap);\r\n    const results = {};\r\n\r\n    function parseGames(player, cells) {\r\n        cells.forEach((cell) => {\r\n            let opponentPlace;\r\n            let resultCls;\r\n\r\n            if (cell.hasAttribute(DOM_ATTRIBUTES.GAME_RESULT) && cell.hasAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT)) {\r\n                opponentPlace = Number(cell.getAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT));\r\n                resultCls = cell.getAttribute(DOM_ATTRIBUTES.GAME_RESULT);\r\n\r\n            } else {\r\n                for (let i = 0; i < resultsMapCount; i++) {\r\n                    let match = cell.textContent.match(resultsMap[i].regexp);\r\n\r\n                    if (!match) {\r\n                        continue;\r\n                    }\r\n\r\n                    opponentPlace = Number(match[1]);\r\n                    resultCls = resultsMap[i].cls;\r\n\r\n                    // opponent row doesn't exist\r\n                    if (opponentPlace <= 0 || (!settings.ignoreOutOfBoundsRows && opponentPlace > rows.length)) {\r\n                        return;\r\n                    }\r\n\r\n                    cell.setAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT, opponentPlace);\r\n                    cell.setAttribute(DOM_ATTRIBUTES.GAME_RESULT, resultsMap[i].cls);\r\n                }\r\n\r\n                if (!opponentPlace) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            player.games[opponentPlace] = {\r\n                cell,\r\n                cls: resultCls\r\n            };\r\n\r\n            player.opponents.push(opponentPlace);\r\n        });\r\n    }\r\n\r\n    let lastTournamentPlacement;\r\n    let lastGridPlacement;\r\n\r\n    rows.forEach((row, index) => {\r\n        if (index < settings.startingRow) {\r\n            return;\r\n        }\r\n\r\n        const cells = asArray(row.querySelectorAll(settings.cellTags));\r\n        const cellsWithResults = cells.filter(columnsWithResultsFilter);\r\n\r\n        // assign default place\r\n        let gridPlacement = -1;\r\n\r\n        // no cells? unlikely to be a result row\r\n        if (!cells.length || !cells[settings.placeColumn]) {\r\n            writeGridPlacement(row, gridPlacement);\r\n            return;\r\n        }\r\n\r\n        let tournamentPlacement = parseInt(cells[settings.placeColumn].textContent, 10);\r\n\r\n        const player = {\r\n            tournamentPlace: -1,\r\n            row,\r\n            games: {},\r\n            opponents: []\r\n        };\r\n\r\n        if (row.hasAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT)) {\r\n            gridPlacement = Number(row.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT));\r\n\r\n        } else {\r\n\r\n            // if no player has been mapped\r\n            if (!lastGridPlacement) {\r\n\r\n                // most probably not a result row\r\n                if (isNaN(tournamentPlacement)) {\r\n                    writeGridPlacement(row, gridPlacement);\r\n                    return;\r\n                }\r\n\r\n                // assign tournament if defined (possibly showing an extract from greater table)\r\n                gridPlacement = tournamentPlacement || 1;\r\n            } else {\r\n                gridPlacement = lastGridPlacement + 1;\r\n            }\r\n\r\n            // assumption: if place is not provided then it's an ex aequo case but\r\n            // we need to set a lower place nonetheless\r\n            if (!tournamentPlacement) {\r\n                tournamentPlacement = lastTournamentPlacement ? lastTournamentPlacement : 1;\r\n\r\n            } else if (tournamentPlacement <= lastTournamentPlacement) {\r\n                tournamentPlacement = lastTournamentPlacement;\r\n            }\r\n\r\n            writeGridPlacement(row, gridPlacement);\r\n        }\r\n\r\n        if (gridPlacement == -1) {\r\n            return;\r\n        }\r\n\r\n        parseGames(player, cellsWithResults);\r\n\r\n        player.tournamentPlace = tournamentPlacement;\r\n        player.opponents.sort((a, b) => a > b ? 1 : -1);\r\n\r\n        results[gridPlacement] = player;\r\n\r\n        lastTournamentPlacement = tournamentPlacement;\r\n        lastGridPlacement = gridPlacement;\r\n    });\r\n\r\n    return results;\r\n}",
    "'use strict';\r\n\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toResultsWithRegExp } from './settings';\r\nimport { defaults } from './utils';\r\n\r\n/**\r\n * Converts raw results string into table with rows and cells.\r\n * Returns null if not valid input.\r\n * @param {string} rawResults\r\n * @param {object} [config]\r\n * @param {number} [config.startingRow=0] - informs where is the first row with results\r\n * @param {number} [config.placeColumn=0] - informs in which column is the place located\r\n * @param {string} [config.roundsColumns] - comma separated list of columns where game results are located\r\n * @param {string} [config.cellSeparator='[\\t ]+'] - separated used to divide rows into cells\r\n * @param {boolean} [config.joinNames=true] - joins two consecutive cells after the place column into one cell\r\n * @returns {HTMLElement|null}\r\n */\r\nexport default function convertRawResultsToTable(rawResults, config) {\r\n    const output = document.createElement('table');\r\n\r\n    if (!rawResults) {\r\n        return output;\r\n    }\r\n\r\n    const settings = defaults(DEFAULT_SETTINGS, config);\r\n    const lines = rawResults\r\n        .replace(/<br[^>]*>/gi, '\\n')\r\n        .replace(/<\\/?code[^>]*>/gi, '')\r\n        .split(/\\r\\n|\\n/);\r\n\r\n    if (lines.length <= 2 && !lines[0] && !lines[1]) {\r\n        return output;\r\n    }\r\n\r\n    const resultsMap = toResultsWithRegExp(settings.results);\r\n    const resultsMapCount = resultsMap.length;\r\n\r\n    const rows = lines\r\n        .map((line) => line\r\n\r\n            // probably unhealthy replacing space in rank in order to make sure\r\n            // that it won't be broken into two cells\r\n            .replace(/([0-9]+)\\s(dan|kyu)/i, '$1_$2')\r\n\r\n            // split line to cells (consider tabs and spaces as separators by default)\r\n            .split(new RegExp(settings.cellSeparator))\r\n\r\n            // remove empty cells\r\n            .filter((cell) => cell.length > 0)\r\n        )\r\n\r\n        // filter out empty rows or rows starting with ';' (EGD/FFG comment)\r\n        .filter((cells) => cells.length > 0 && cells[0].indexOf(';') !== 0);\r\n\r\n    const tableWidth = rows.reduce((prev, line) => Math.max(prev, line.length), 0);\r\n    const tableModifier = settings.joinNames ? -1 : 0;\r\n    const joinNamePos = settings.placeColumn + 1;\r\n\r\n    let gamesInColumns = null;\r\n\r\n    // if columns rounds are provided then convert only them\r\n    if (typeof settings.roundsColumns === 'string') {\r\n        gamesInColumns = settings.roundsColumns.split(',').map(Number);\r\n    }\r\n\r\n    let previousPlace;\r\n\r\n    rows.forEach((cells, index) => {\r\n        const row = document.createElement('tr');\r\n        const width = cells.length;\r\n\r\n        if (!width) {\r\n            return;\r\n        }\r\n\r\n        if (index < settings.startingRow || width < (tableWidth + tableModifier)) {\r\n            let cell = document.createElement('td');\r\n\r\n            cell.setAttribute('colspan', tableWidth + tableModifier);\r\n            cell.textContent = cells.join(' ');\r\n\r\n            row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, -1);\r\n            row.appendChild(cell);\r\n\r\n        } else {\r\n\r\n            const place = parseInt(cells[settings.placeColumn], 10);\r\n\r\n            if (isNaN(place) && !previousPlace) {\r\n                cells.forEach((cellContent) => {\r\n                    let cell = document.createElement('td');\r\n\r\n                    cell.textContent = cellContent;\r\n\r\n                    row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, -1);\r\n                    row.appendChild(cell);\r\n                });\r\n\r\n            } else {\r\n                row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, previousPlace || place);\r\n\r\n                let opponents = [];\r\n\r\n                if (settings.joinNames) {\r\n                    cells.splice(joinNamePos, 2, `${cells[joinNamePos]}  ${cells[joinNamePos + 1]}`);\r\n                }\r\n\r\n                cells.forEach((cellContent, index) => {\r\n                    let cell = document.createElement('td');\r\n\r\n                    cell.textContent = cellContent.replace(/_/, ' ');\r\n\r\n                    if (!gamesInColumns || gamesInColumns.indexOf(index) >= 0) {\r\n                        for (let i = 0; i < resultsMapCount; i++) {\r\n                            let match = cellContent.match(resultsMap[i].regexp);\r\n\r\n                            if (!match) {\r\n                                continue;\r\n                            }\r\n\r\n                            let opponentPlacement = match[1];\r\n\r\n                            opponents.push(opponentPlacement);\r\n                            cell.setAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT, opponentPlacement);\r\n                            cell.setAttribute(DOM_ATTRIBUTES.GAME_RESULT, resultsMap[i].cls);\r\n                        }\r\n                    }\r\n\r\n                    row.appendChild(cell);\r\n                });\r\n\r\n                if (opponents.length) {\r\n                    row.setAttribute(DOM_ATTRIBUTES.OPPONENTS, opponents.join(','));\r\n                }\r\n\r\n                if (!previousPlace) {\r\n                    previousPlace = 2;\r\n                }  else {\r\n                    previousPlace += 1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        output.appendChild(row);\r\n    });\r\n\r\n    output.setAttribute(DOM_ATTRIBUTES.RESULT_TABLE, '');\r\n\r\n    return output;\r\n}\r\n",
    "'use strict';\r\n\r\n/**\r\n * Default settings of the plugin\r\n * @type {HighlighterSettings}\r\n */\r\nexport const DEFAULT_SETTINGS = {\r\n\r\n    // css class names\r\n    prefixCls:     'go-results-',\r\n    rearrangedCls: 'rearranged',\r\n    tableCls:      'table',\r\n    gameCls:       'game',\r\n    currentCls:    'current',\r\n\r\n    // results map\r\n    results: {\r\n        won: '([0-9]+)\\\\+',\r\n        lost: '([0-9]+)\\\\-',\r\n        jigo: '([0-9]+)=',\r\n        unresolved: '([0-9]+)\\\\?'\r\n    },\r\n\r\n    // parser settings\r\n    startingRow: 0,\r\n    placeColumn: 0,\r\n    roundsColumns: null,\r\n    rowTags: 'tr',\r\n    cellTags: 'td',\r\n    ignoreOutOfBoundsRows: false,\r\n    checkColumnsForResults: true,\r\n\r\n    // converter settings\r\n    cellSeparator: '[\\t ]+',\r\n    joinNames: true,\r\n\r\n    // behavior settings\r\n    hovering:    true,\r\n    rearranging: true\r\n};\r\n\r\nconst CLASSES_TO_BE_PREFIXED = [\r\n    'rearrangedCls',\r\n    'tableCls',\r\n    'gameCls',\r\n    'currentCls'\r\n];\r\n\r\n/**\r\n * Names of attributes used in this plugin\r\n * @type {{RESULT_TABLE: string, SETTING_STARTING_ROW: string, SETTING_PLACE_COLUMN: string, SETTING_ROUNDS_COLUMNS: string, SETTING_REARRANGING: string, SETTING_HOVERING: string, PLAYER_PLACEMENT: string, OPPONENT_PLACEMENT: string, OPPONENTS: string, GAME_RESULT: string}}\r\n */\r\nexport const DOM_ATTRIBUTES = {\r\n    RESULT_TABLE:           'data-go-results',\r\n    SETTING_STARTING_ROW:   'data-go-starting-row',\r\n    SETTING_PLACE_COLUMN:   'data-go-place-column',\r\n    SETTING_ROUNDS_COLUMNS: 'data-go-rounds-columns',\r\n    SETTING_REARRANGING:    'data-go-rearranging',\r\n    SETTING_HOVERING:       'data-go-hovering',\r\n    PLAYER_PLACEMENT:       'data-go-place',\r\n    OPPONENT_PLACEMENT:     'data-go-opponent',\r\n    OPPONENTS:              'data-go-opponents',\r\n    GAME_RESULT:            'data-go-result'\r\n};\r\n\r\n/**\r\n * Transforms map of possible results into array of objects with regexp string\r\n * converted into RegExp objects.\r\n * @param {ClassToResultMapping} results\r\n * @returns {Array.<ResultMapping>}\r\n */\r\nexport function toResultsWithRegExp(results) {\r\n    const map = [];\r\n\r\n    for (let cls in results) {\r\n        if (results.hasOwnProperty(cls)) {\r\n            map.push({\r\n                cls,\r\n                regexp: new RegExp(results[cls])\r\n            });\r\n        }\r\n    }\r\n\r\n    return map;\r\n}\r\n\r\n/**\r\n * Returns object with prefixed classes based on settings\r\n * @param {object} settings\r\n * @returns {{}}\r\n */\r\nexport function toPrefixedClasses(settings) {\r\n    let result = {};\r\n\r\n    CLASSES_TO_BE_PREFIXED.forEach((cls) => {\r\n        result[cls] = settings.prefixCls + settings[cls];\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Checks the element for attributes and returns object with set appropriate\r\n * values\r\n * @param {HTMLElement} table\r\n * @returns {object}\r\n */\r\nexport function readTableSettingsFromDOM(table) {\r\n    const output = {};\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_PLACE_COLUMN)) {\r\n        output.placeColumn = Number(table.getAttribute(DOM_ATTRIBUTES.SETTING_PLACE_COLUMN));\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_STARTING_ROW)) {\r\n        output.startingRow = Number(table.getAttribute(DOM_ATTRIBUTES.SETTING_STARTING_ROW));\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_ROUNDS_COLUMNS)) {\r\n        output.roundsColumns = table.getAttribute(DOM_ATTRIBUTES.SETTING_ROUNDS_COLUMNS);\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_REARRANGING)) {\r\n        output.rearranging = table.getAttribute(DOM_ATTRIBUTES.SETTING_REARRANGING) !== 'false';\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_HOVERING)) {\r\n        output.hovering = table.getAttribute(DOM_ATTRIBUTES.SETTING_HOVERING) !== 'false';\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\n\r\n/**\r\n * @typedef {object} ClassToResultMapping\r\n * @property {string} [won='([0-9]+)\\\\+'] - default winning regexp\r\n * @property {string} [lost='([0-9]+)\\\\-'] - default losing regexp\r\n * @property {string} [jigo='([0-9]+)='] - default draw regexp\r\n * @property {string} [unresolved='([0-9]+)\\\\?] - default unresolved regexp\r\n */\r\n\r\n/**\r\n * @typedef {object} ResultMapping\r\n * @property {string} cls - CSS class name to be added to row which matches the regexp\r\n * @property {RegExp} regexp - Regexp for result determination\r\n */\r\n\r\n/**\r\n * @typedef {object} HighlighterSettings\r\n * @property {string} [prefixCls='go-results-'] - css class prefix\r\n * @property {string} [rearrangedCls='rearranged'] - class applied when table is rearranged\r\n * @property {string} [gameCls='game'] - class applied when to game results\r\n * @property {string} [currentCls='current'] - selected row class name\r\n * @property {ClassToResultMapping} [results] - contains regexps used to determine game results mapped to css class that is applied to the cell with given result\r\n * @property {number} [placeColumn=0] - index of the column where the script should expect to find player's placement\r\n * @property {number} [startingRow=0] - row in table from which the search of results should start\r\n * @property {string|null} [roundsColumns=null] - coma-separated list of columns which should contain the results, otherwise all columns are scanned\r\n * @property {string} [rowTags='tr'] - querySelection-compatible string with tags representing players' rows\r\n * @property {string} [cellTags='td,th'] - querySelection-compatible\r\n * @property {boolean} [checkColumnsForResults=true] - whether the highlighter should first try to find columns with Go results before parsing every row\r\n * @property {boolean} [ignoreOutOfBoundsRows=false] - whether it is allowed to have games with player that are not visible on the list (e.g. when table is paginated)\r\n * @property {string} [cellSeparator='[\\t ]+'] - regexp used to split single line into columns when parsing unformatted results\r\n * @property {boolean} [joinNames=true] - whether 2 columns next to placement should be treated as name and surname and merged into single column when parsing unformatted results\r\n * @property {boolean} [hovering=true] - whether hovering should be enabled\r\n * @property {boolean} [rearranging=true] - whether row rearrangement on click should be enabled\r\n */\r\n",
    "'use strict';\r\n\r\n/**\r\n * Transforms array-like objects (such as arguments or node lists) into an array\r\n * @param {*} arrayLike\r\n * @returns {Array.<T>}\r\n */\r\nexport function asArray(arrayLike) {\r\n    return Array.prototype.slice.call(arrayLike);\r\n}\r\n\r\n/**\r\n * Returns new object containing keys only from defaultObj but values are taken\r\n * from if exist (starting from the last object provided)\r\n * @param {object} defaultObj\r\n * @param {Array.<object>} ...objects\r\n * @returns {object}\r\n */\r\nexport function defaults(defaultObj, ...objects) {\r\n    const overrides = objects\r\n        .filter((obj) => typeof obj === 'object')\r\n        .reverse();\r\n\r\n    const count = overrides.length;\r\n    const result = {};\r\n\r\n    mainLoop: for (let key in defaultObj) {\r\n        for (let i = 0; i < count; i++) {\r\n            if (overrides[i].hasOwnProperty(key)) {\r\n                result[key] = overrides[i][key];\r\n                continue mainLoop;\r\n            }\r\n        }\r\n\r\n        result[key] = defaultObj[key];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns new object that has merged properties from all provided objects.\r\n * Latest arguments overrides the earlier values.\r\n * @param {Array.<object>} objects\r\n * @returns {object}\r\n */\r\nexport function combine(...objects) {\r\n    const result = {};\r\n\r\n    objects.forEach((object) => {\r\n        for (let key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                result[key] = object[key];\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n}",
    "'use strict';\r\n\r\nimport Highlighter from './highlighter';\r\n\r\n/**\r\n * Class wrapper for highlighter\r\n * @module wrapper\r\n */\r\n\r\n/**\r\n * Creates new Go Results Highlighter\r\n * @param {HTMLElement} element - element where the highlighter should be bound\r\n * to, preferably a table or a pre element\r\n * @param {HighlighterSettings} [settings] - configuration of the highlighter\r\n * @constructor\r\n */\r\nfunction GoResultsHighlighter(element, settings) {\r\n\r\n    // force new instance\r\n    if (!(this instanceof GoResultsHighlighter)) {\r\n        return new GoResultsHighlighter(element, settings);\r\n    }\r\n\r\n    const highlighter = new Highlighter(element, settings);\r\n\r\n    /**\r\n     * Highlights player and his/hers opponents\r\n     * @param {number|object} player - placement of the player or the object with\r\n     * properties containing player, rearrange and opponent fields\r\n     * @param {number|Array.<number>|boolean} [games] - opponent with whom the game should be\r\n     * @param {boolean} [rearrange] - whether to rearrange result rows\r\n     * highlighted\r\n     */\r\n    this.highlight = (player, games, rearrange) => {\r\n        if (typeof player === 'object') {\r\n            highlighter.highlight(player);\r\n\r\n        } else {\r\n\r\n            if (typeof games === 'boolean') {\r\n                rearrange = games;\r\n                games = null;\r\n            }\r\n\r\n            highlighter.highlight({ player, rearrange, games });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Changes current configuration of the highlighter\r\n     * @param {HighlighterSettings} settings\r\n     */\r\n    this.configure = (settings) => {\r\n        highlighter.configure(settings);\r\n    };\r\n\r\n    /**\r\n     * Gets opponents for the player on provided place.\r\n     * @param {number} player - placement of player to get the list of opponents\r\n     * @returns {Array.<number>}\r\n     */\r\n    this.opponents = (player) => {\r\n        const entry = highlighter.map[player];\r\n\r\n        return entry ? entry.opponents.slice() : [];\r\n    };\r\n\r\n    /**\r\n     * Removes inline styles from player rows and their children.\r\n     */\r\n    this.clearInlineStyles = () => {\r\n        highlighter.clearInlineStyles();\r\n    };\r\n\r\n    Object.defineProperties(this, /** @lends module:wrapper~GoResultsHighlighter.prototype */ {\r\n\r\n        /**\r\n         * Contains reference to element with highlighter\r\n         * @type {HTMLElement}\r\n         * @readonly\r\n         */\r\n        element: getter(() => highlighter.element),\r\n\r\n        /**\r\n         * Informs whether the any player is highlighted\r\n         * @type {boolean}\r\n         * @readonly\r\n         */\r\n        isHighlighting: getter(() => highlighter.isHighlighting),\r\n\r\n        /**\r\n         * Informs whether the rows are rearranged to display results in compact\r\n         * mode\r\n         * @type {boolean}\r\n         * @readonly\r\n         */\r\n        isRearranged: getter(() => highlighter.isRearranged),\r\n\r\n        /**\r\n         * Contains placement of current highlighted player\r\n         * @type {number|null}\r\n         * @readonly\r\n         */\r\n        player: getter(() => highlighter.current || null),\r\n\r\n        /**\r\n         * Contains count of player rows\r\n         * @type {number}\r\n         * @readonly\r\n         */\r\n        players: getter(() => highlighter.players.length),\r\n\r\n        /**\r\n         * Contains list of highlighted games (placements of opponents)\r\n         * @type {Array.<number>}\r\n         * @readonly\r\n         */\r\n        games: getter(() => highlighter.games),\r\n\r\n        /**\r\n         * Contains current configuration of Go Results Highlighter\r\n         * @type {HighlighterSettings}\r\n         * @readonly\r\n         */\r\n        configuration: getter(() => {\r\n            const originalResults = highlighter.settings.results;\r\n            const results = {};\r\n\r\n            for (let prop in originalResults) {\r\n                if (originalResults.hasOwnProperty(prop)) {\r\n                    results[prop] = originalResults[prop];\r\n                }\r\n            }\r\n\r\n            return {\r\n                startingRow: highlighter.settings.startingRow,\r\n                placeColumn: highlighter.settings.placeColumn,\r\n                roundsColumns: highlighter.settings.roundsColumns,\r\n                prefixCls: highlighter.settings.prefixCls,\r\n                rearrangedCls: highlighter.settings.rearrangedCls,\r\n                tableCls: highlighter.settings.tableCls,\r\n                gameCls: highlighter.settings.gameCls,\r\n                currentCls: highlighter.settings.currentCls,\r\n                rowTags: highlighter.settings.rowTags,\r\n                cellTags: highlighter.settings.cellTags,\r\n                cellSeparator: highlighter.settings.cellSeparator,\r\n                joinNames: highlighter.settings.joinNames,\r\n                ignoreOutOfBoundsRows: highlighter.settings.ignoreOutOfBoundsRows,\r\n                checkColumnsForResults: highlighter.settings.checkColumnsForResults,\r\n                results\r\n            };\r\n        }),\r\n\r\n        /**\r\n         * Informs whether the rearranging is enabled.\r\n         * @type {boolean}\r\n         */\r\n        rearranging: {\r\n            set: (value) => {\r\n                if (!value && highlighter.isRearranged) {\r\n                    highlighter.highlight(null);\r\n                }\r\n\r\n                highlighter.settings.rearranging = !!value;\r\n            },\r\n            get: () => highlighter.settings.rearranging,\r\n            configurable: false,\r\n            enumerable: true\r\n        },\r\n\r\n        /**\r\n         * Informs whether the hovering is enabled.\r\n         * @type {boolean}\r\n         */\r\n        hovering: {\r\n            set: (value) => highlighter.settings.hovering = !!value,\r\n            get: () => highlighter.settings.hovering,\r\n            configurable: false,\r\n            enumerable: true\r\n        }\r\n    });\r\n\r\n    highlighter.element.goResultsHighlighter = this;\r\n}\r\n\r\n/**\r\n * Helper function returning definition of read only getter defined in callback\r\n * @param {Function} callback\r\n * @returns {object}\r\n */\r\nfunction getter(callback) {\r\n    return {\r\n        get: callback,\r\n        enumerable: true,\r\n        configurable: false\r\n    };\r\n}\r\n\r\nmodule.exports = GoResultsHighlighter;"
  ]
}