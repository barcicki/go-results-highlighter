{
  "version": 3,
  "sources": [
    "node_modules\\gulp-browserify\\node_modules\\browser-pack\\_prelude.js",
    "fake_221b7307.js",
    "highlighter.js",
    "parser.js",
    "raw2table.js",
    "settings.js",
    "utils.js",
    "wrapper.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "go-results-highlighter",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\r\n\r\nimport GoResultsHighlighter from './lib/wrapper';\r\nimport { DOM_ATTRIBUTES } from './lib/settings';\r\nimport { asArray } from './lib/utils';\r\n\r\nfunction initialize() {\r\n    asArray(document.querySelectorAll(`[${DOM_ATTRIBUTES.RESULT_TABLE}]`))\r\n        .forEach((tableEl) => new GoResultsHighlighter(tableEl));\r\n}\r\n\r\nif (document.readyState === 'complete') {\r\n    initialize();\r\n} else {\r\n    document.addEventListener('DOMContentLoaded', initialize, false);\r\n}\r\n\r\nif (typeof jQuery !== 'undefined') {\r\n    jQuery.fn.goResultsHighlighter = function (options) {\r\n        this.each(function (index, element) {\r\n            let highlighter = new GoResultsHighlighter(element, options);\r\n\r\n            $(highlighter.element).data('GoResultsHighlighter', highlighter);\r\n        });\r\n        return this;\r\n    };\r\n}\r\n\r\nmodule.exports = GoResultsHighlighter;",
    "'use strict';\r\n\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toPrefixedClasses, readTableSettingsFromDOM } from './settings';\r\nimport parse from './parser';\r\nimport convert from './raw2table';\r\nimport { asArray, defaults } from './utils';\r\n\r\nexport default class GoResultsHighlighter {\r\n\r\n    /**\r\n     * Creates new instance of GoResultsHighlighter\r\n     *\r\n     * @param {HTMLElement} element - main element containing table with results\r\n     * @param {object} [settings] - plugin settings\r\n     * @param {number} [settings.column=0] - index of the column\r\n     * where the script should expect to find player's placement\r\n     * @param {number} [settings.row=0] - starting row with players\r\n     * @param {string} [settings.prefixCls='go-results-'] - css class prefix\r\n     * @param {string} [settings.gameCls='game'] - game cell class name\r\n     * @param {string} [settings.currentCls='current'] - selected row class name\r\n     * @param {object} [settings.results] - map with possible results, by default\r\n     * supports 4 options. Provide with \"className\" -> \"regexp\" pattern.\r\n     * @param {string} [settings.results.won='([0-9]+)\\\\+'] - default winning regexp\r\n     * @param {string} [settings.results.lost='([0-9]+)\\\\-'] - default losing regexp\r\n     * @param {string} [settings.results.jigo='([0-9]+)='] - default draw regexp\r\n     * @param {string} [settings.results.unresolved='([0-9]+)\\\\?] - default unresolved regexp\r\n     * @param {string} [settings.rowTags='tr'] - querySelection-compatible string\r\n     * with tags representing players' rows\r\n     * @param {string} [settings.cellTags='td,th'] - querySelection-compatible\r\n     * string with tags holding game results\r\n     */\r\n    constructor(element, settings) {\r\n        this.settings = defaults(DEFAULT_SETTINGS, readTableSettingsFromDOM(element), settings);\r\n\r\n        if (element instanceof HTMLPreElement) {\r\n            let table = convert(element.innerHTML, settings);\r\n            let parent = element.parentNode;\r\n\r\n            parent.insertBefore(table, element);\r\n            parent.removeChild(element);\r\n\r\n            this.element = table;\r\n        } else {\r\n            this.element = element;\r\n        }\r\n\r\n        if (!this.element.classList) {\r\n            // not supported\r\n            return;\r\n        }\r\n\r\n        this.createPlayersMap();\r\n        this.bindEvents();\r\n\r\n        this.element.classList.add(this.settings.prefixCls + this.settings.tableCls);\r\n\r\n        this.current = null;\r\n        this.games = [];\r\n        this.isRearranged = false;\r\n        this.isHighlighting = false;\r\n    }\r\n\r\n    /**\r\n     * Creates players map\r\n     */\r\n    createPlayersMap() {\r\n        this.map = parse(this.element, this.settings);\r\n        this.players = [];\r\n\r\n        for (let placement in this.map) {\r\n            if (this.map.hasOwnProperty(placement)) {\r\n                this.players.push(this.map[placement]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks player and his opponents highlighted.\r\n     * @param {object|null} [settings] - highlighting settings or player to be highlighted\r\n     * @param {number} [settings.player] - player whose opponents should be\r\n     * highlighted\r\n     * @param {boolean} [settings.rearrange=false] - whether the table should be\r\n     * rearranged to display results in compact size\r\n     * @param {Array.<number>} [settings.games] - the opponent whose game with the\r\n     * player should be highlighted\r\n     */\r\n    highlight(settings) {\r\n        if (!settings) {\r\n            settings = {};\r\n        }\r\n\r\n        let playerPlace = settings.player;\r\n        let rearrange = settings.rearrange === true;\r\n        let gamesToHighlight = settings.games;\r\n\r\n        const player = this.map[playerPlace];\r\n        const classes = toPrefixedClasses(this.settings);\r\n\r\n        // if table is already rearranged then transform it back to default state\r\n        if (this.isRearranged) {\r\n            restoreNaturalOrder(this.players);\r\n        }\r\n\r\n        // rearrange the table if player and appropriate setting is provided\r\n        if (player && rearrange) {\r\n            rearrangeOrder(player, player.opponents.map((opponentPlace) => this.map[opponentPlace]));\r\n\r\n            this.element.classList.add(classes.rearrangedCls);\r\n            this.isRearranged = true;\r\n        } else {\r\n            this.element.classList.remove(classes.rearrangedCls);\r\n            this.isRearranged = false;\r\n        }\r\n\r\n        const markedGames = asArray(this.element.querySelectorAll('.' + classes.gameCls));\r\n        const markedRow = this.element.querySelector('.' + classes.currentCls);\r\n        const markedRowPlacement = markedRow ? markedRow.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT) : null;\r\n        const markedPlayer = markedRowPlacement ? this.map[markedRowPlacement] : null;\r\n        const mark = (player, active) => {\r\n            const method = active ? 'add' : 'remove';\r\n\r\n            player.row.classList[method](classes.currentCls);\r\n\r\n            player.opponents.forEach((opponentPlace) => {\r\n                let opponent = this.map[opponentPlace];\r\n\r\n                opponent.row.classList[method](this.settings.prefixCls + player.games[opponentPlace].cls);\r\n            });\r\n        };\r\n\r\n        // remove any visible game markings\r\n        markedGames.forEach((gameCell) => {\r\n            gameCell.classList.remove(classes.gameCls);\r\n        });\r\n\r\n        // unmark player if necessary\r\n        if (markedPlayer && markedPlayer !== player) {\r\n            mark(markedPlayer, false);\r\n        }\r\n\r\n        // mark the player if not already marked\r\n        if (player && player !== markedPlayer) {\r\n            mark(player, true);\r\n        }\r\n\r\n        // clear list of highlighted games\r\n        this.games.length = 0;\r\n\r\n        if (player) {\r\n            if (typeof gamesToHighlight === 'number') {\r\n                gamesToHighlight = [gamesToHighlight];\r\n            }\r\n\r\n            if (gamesToHighlight && typeof gamesToHighlight.length === 'number') {\r\n                gamesToHighlight.forEach((opponentPlace) => {\r\n                    let opponent = this.map[opponentPlace];\r\n                    let game = player.games[opponentPlace];\r\n\r\n                    if (opponent && game) {\r\n                        game.cell.classList.add(classes.gameCls);\r\n                        opponent.games[playerPlace].cell.classList.add(classes.gameCls);\r\n                        this.games.push(opponentPlace);\r\n                    }\r\n                });\r\n            } else if (this.isRearranged) {\r\n                player.opponents.forEach((opponent) => {\r\n                    this.map[opponent].games[playerPlace].cell.classList.add(classes.gameCls);\r\n                    this.games.push(opponent);\r\n                });\r\n            }\r\n\r\n            this.current = playerPlace;\r\n            this.isHighlighting = true;\r\n        } else {\r\n            this.current = null;\r\n            this.isHighlighting = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds touchend, click, mouseover and mouseout events listeners to the element.\r\n     */\r\n    bindEvents() {\r\n        let hasTouchMoved = false;\r\n\r\n        this.element.addEventListener('touchstart', () => {\r\n            hasTouchMoved = false;\r\n        });\r\n\r\n        this.element.addEventListener('touchmove', () => {\r\n            hasTouchMoved = true;\r\n        });\r\n\r\n        this.element.addEventListener('touchend', (event) => {\r\n            if (hasTouchMoved || (this.settings.rearranging === false && this.settings.hovering === false)) {\r\n                return;\r\n            }\r\n\r\n            let { target, player, games } = fetchInformationAboutTarget(event.target);\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            let rearrange = false;\r\n            let lastTargetPos;\r\n\r\n            if (this.current === player) {\r\n                if (!this.settings.rearranging || !this.settings.hovering) {\r\n                    player = null;\r\n                }\r\n                rearrange = !this.isRearranged;\r\n\r\n            } else if (this.isRearranged || !this.settings.hovering) {\r\n                rearrange = true;\r\n            }\r\n\r\n            if (rearrange) {\r\n                lastTargetPos = target.getBoundingClientRect().top;\r\n            }\r\n\r\n            this.highlight({ player, games, rearrange });\r\n\r\n            if (lastTargetPos) {\r\n                updateTopPosition(target, lastTargetPos);\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.element.addEventListener('click', (event) => {\r\n            if (this.settings.rearranging === false) {\r\n                return;\r\n            }\r\n\r\n            let { target, player, games } = fetchInformationAboutTarget(event.target);\r\n            let rearrange = false;\r\n            let lastTargetPos;\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            if (!this.isRearranged || target.properNextSibling) {\r\n                rearrange = true;\r\n\r\n            } else if (!this.settings.hovering) {\r\n                player = null;\r\n            }\r\n\r\n            if (rearrange) {\r\n                lastTargetPos = target.getBoundingClientRect().top;\r\n            }\r\n\r\n            this.highlight({ player, games, rearrange });\r\n\r\n            if (lastTargetPos) {\r\n                updateTopPosition(target, lastTargetPos);\r\n            }\r\n        });\r\n\r\n        this.element.addEventListener('mouseover', (event) => {\r\n            if (this.settings.hovering === false) {\r\n                return;\r\n            }\r\n\r\n            let { player, games } = fetchInformationAboutTarget(event.target);\r\n            let rearrange = this.isRearranged;\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            if (this.isRearranged) {\r\n                if ((!games || player !== this.current) && this.games.length === this.map[this.current].opponents.length) {\r\n                    return;\r\n                }\r\n\r\n                if (player !== this.current) {\r\n                    player = this.current;\r\n                    games = null;\r\n                }\r\n            }\r\n\r\n            this.highlight({ player, rearrange, games });\r\n        }, false);\r\n\r\n        this.element.addEventListener('mouseout', (event) => {\r\n            if (this.settings.hovering === false) {\r\n                return;\r\n            }\r\n\r\n            let target = event.relatedTarget;\r\n\r\n            while (target && target !== document && target !== this.element) {\r\n                target = target.parentNode;\r\n            }\r\n\r\n            // if new hovered element is outside the table then remove all\r\n            // selections unless the table is rearranged - then only highlight\r\n            // all games\r\n            if (target !== this.element) {\r\n                if (this.isRearranged && this.games.length !== this.map[this.current].opponents.length) {\r\n                    this.highlight({ player: this.current, rearrange: true });\r\n                } else if (!this.isRearranged) {\r\n                    this.highlight(null);\r\n                }\r\n            }\r\n        }, false);\r\n    }\r\n}\r\n\r\n/**\r\n * Compare current target's top position with previous value and scroll window\r\n * to previous value if it differs\r\n * @param {HTMLElement} target\r\n * @param {number} previousTop\r\n */\r\nfunction updateTopPosition(target, previousTop) {\r\n    let diff = target.getBoundingClientRect().top - previousTop;\r\n\r\n    if (Math.abs(diff) > 10) {\r\n        window.scrollBy(0, diff);\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves information about player and opponent placement from provided element\r\n * or its parents. Returns also the row with player placement information.\r\n * @param {HTMLElement} target - target of the event\r\n * @returns {object}\r\n */\r\nfunction fetchInformationAboutTarget(target) {\r\n    var result = {\r\n        player: null,\r\n        games: null,\r\n        target: null\r\n    };\r\n\r\n    // fetch information about hovered element\r\n    while (target && target !== document) {\r\n        let opponentGridPlacement = target.getAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT);\r\n        let playerGridPlacement = target.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT);\r\n\r\n        // game cell?\r\n        if (opponentGridPlacement) {\r\n            result.games = Number(opponentGridPlacement);\r\n        }\r\n\r\n        // player row? no further search is necessary\r\n        if (playerGridPlacement) {\r\n            result.player = Number(playerGridPlacement);\r\n            break;\r\n        }\r\n\r\n        target = target.parentNode;\r\n    }\r\n\r\n    result.target = target;\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Restores default order of rows in the table\r\n * @param {Array.<object>} players - list of mapping data for all rows\r\n */\r\nfunction restoreNaturalOrder(players) {\r\n    players\r\n        .filter((player) => player.row.properNextSibling)\r\n        .reverse()\r\n        .forEach((player) => {\r\n            if (player.row.properNextSibling === -1) {\r\n                player.row.parentNode.appendChild(player.row);\r\n            } else {\r\n                player.row.parentNode.insertBefore(player.row, player.row.properNextSibling);\r\n            }\r\n            player.row.properNextSibling = null;\r\n        });\r\n}\r\n\r\n/**\r\n * Rearranges the rows in a table\r\n * @param {object} player - player mapping data\r\n * @param {Array.<object>} opponents - list of opponents mapping data\r\n */\r\nfunction rearrangeOrder(player, opponents) {\r\n    const parent = player.row.parentNode;\r\n    let after = player.row.nextElementSibling;\r\n\r\n    opponents.forEach((opponent) => {\r\n        opponent.row.properNextSibling = opponent.row.nextElementSibling || -1;\r\n\r\n        if (opponent.tournamentPlace < player.tournamentPlace) {\r\n            parent.insertBefore(opponent.row, player.row);\r\n        } else {\r\n            parent.insertBefore(opponent.row, after);\r\n            after = opponent.row.nextElementSibling;\r\n        }\r\n    });\r\n}\r\n\r\nGoResultsHighlighter.DEFAULT_SETTINGS = DEFAULT_SETTINGS;\r\n",
    "'use strict';\r\n\r\nimport { asArray, defaults } from './utils';\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toResultsWithRegExp } from './settings';\r\n\r\nfunction writeGridPlacement(row, placement) {\r\n    row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, placement);\r\n}\r\n\r\n/**\r\n * Traverse provided table and create results map\r\n * @param {HTMLElement} table - table results container\r\n * @param {object} [config] - settings for parser\r\n * @param {string} [config.rowTags]\r\n * @param {string} [config.cellTags]\r\n * @param {object} [config.results]\r\n * @param {object} [config.placeColumn]\r\n * @param {object} [config.roundsColumns]\r\n * @param {object} [config.startingRow]\r\n * @returns {object}\r\n */\r\nexport default function parse(table, config) {\r\n    const settings = defaults(DEFAULT_SETTINGS, config);\r\n    const rows = asArray(table.querySelectorAll(settings.rowTags));\r\n    const resultsMap = toResultsWithRegExp(settings.results);\r\n    const resultsMapCount = resultsMap.length;\r\n    const results = {};\r\n\r\n    function parseGames(player, cells) {\r\n        // if columns rounds are provided then parse only them\r\n        if (typeof settings.roundsColumns === 'string') {\r\n            cells = settings.roundsColumns\r\n                .split(',')\r\n                .map((round) => {\r\n                    return cells[Number(round)];\r\n                });\r\n        }\r\n\r\n        cells.forEach((cell) => {\r\n            let opponentPlace;\r\n            let resultCls;\r\n\r\n\r\n            if (cell.hasAttribute(DOM_ATTRIBUTES.GAME_RESULT) && cell.hasAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT)) {\r\n                opponentPlace = Number(cell.getAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT));\r\n                resultCls = cell.getAttribute(DOM_ATTRIBUTES.GAME_RESULT);\r\n\r\n            } else {\r\n                for (let i = 0; i < resultsMapCount; i++) {\r\n                    let match = cell.textContent.match(resultsMap[i].regexp);\r\n\r\n                    if (!match) {\r\n                        continue;\r\n                    }\r\n\r\n                    opponentPlace = Number(match[1]);\r\n                    resultCls = resultsMap[i].cls;\r\n\r\n                    cell.setAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT, opponentPlace);\r\n                    cell.setAttribute(DOM_ATTRIBUTES.GAME_RESULT, resultsMap[i].cls);\r\n                }\r\n\r\n                if (!opponentPlace) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            player.games[opponentPlace] = {\r\n                cell,\r\n                cls: resultCls\r\n            };\r\n\r\n            player.opponents.push(opponentPlace);\r\n        });\r\n    }\r\n\r\n    let lastTournamentPlacement;\r\n    let lastGridPlacement;\r\n\r\n    rows.forEach((row, index) => {\r\n        if (index < settings.startingRow) {\r\n            return;\r\n        }\r\n\r\n        const cells = asArray(row.querySelectorAll(settings.cellTags));\r\n\r\n        // assign default place\r\n        let gridPlacement = -1;\r\n\r\n        // no cells? unlikely to be a result row\r\n        if (!cells.length || !cells[settings.placeColumn]) {\r\n            writeGridPlacement(row, gridPlacement);\r\n            return;\r\n        }\r\n\r\n        let tournamentPlacement = parseInt(cells[settings.placeColumn].textContent, 10);\r\n\r\n        const player = {\r\n            tournamentPlace: -1,\r\n            row,\r\n            games: {},\r\n            opponents: []\r\n        };\r\n\r\n        if (row.hasAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT)) {\r\n            gridPlacement = Number(row.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT));\r\n\r\n        } else {\r\n\r\n            // if no player has been mapped\r\n            if (!lastGridPlacement) {\r\n\r\n                // most probably not a result row\r\n                if (isNaN(tournamentPlacement)) {\r\n                    writeGridPlacement(row, gridPlacement);\r\n                    return;\r\n                }\r\n\r\n                // assign tournament if defined (possibly showing an extract from greater table)\r\n                gridPlacement = tournamentPlacement || 1;\r\n            } else {\r\n                gridPlacement = lastGridPlacement + 1;\r\n            }\r\n\r\n            // assumption: if place is not provided then it's an ex aequo case but\r\n            // we need to set a lower place nonetheless\r\n            if (!tournamentPlacement) {\r\n                tournamentPlacement = lastTournamentPlacement ? lastTournamentPlacement : 1;\r\n\r\n            } else if (tournamentPlacement <= lastTournamentPlacement) {\r\n                tournamentPlacement = lastTournamentPlacement;\r\n            }\r\n\r\n            writeGridPlacement(row, gridPlacement);\r\n        }\r\n\r\n        if (gridPlacement == -1) {\r\n            return;\r\n        }\r\n\r\n        parseGames(player, cells);\r\n\r\n        player.tournamentPlace = tournamentPlacement;\r\n        player.opponents.sort((a, b) => a > b ? 1 : -1);\r\n\r\n        results[gridPlacement] = player;\r\n\r\n        lastTournamentPlacement = tournamentPlacement;\r\n        lastGridPlacement = gridPlacement;\r\n    });\r\n\r\n    return results;\r\n}",
    "'use strict';\r\n\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toResultsWithRegExp } from './settings';\r\nimport { defaults } from './utils';\r\n\r\n/**\r\n * Converts raw results string into table with rows and cells.\r\n * Returns null if not valid input.\r\n * @param {string} rawResults\r\n * @param {object} [config]\r\n * @param {number} [config.startingRow=0] - informs where is the first row with results\r\n * @param {number} [config.placeColumn=0] - informs in which column is the place located\r\n * @param {string} [config.roundsColumns] - comma separated list of columns where game results are located\r\n * @param {string} [config.cellSeparator='[\\t ]+'] - separated used to divide rows into cells\r\n * @param {boolean} [config.joinNames=true] - joins two consecutive cells after the place column into one cell\r\n * @returns {HTMLElement|null}\r\n */\r\nexport default function convertRawResultsToTable(rawResults, config) {\r\n    const output = document.createElement('table');\r\n\r\n    if (!rawResults) {\r\n        return output;\r\n    }\r\n\r\n    const settings = defaults(DEFAULT_SETTINGS, config);\r\n    const lines = rawResults.split(/\\r\\n|\\n/);\r\n\r\n    if (lines.length <= 2 && !lines[0] && !lines[1]) {\r\n        return output;\r\n    }\r\n\r\n    const resultsMap = toResultsWithRegExp(settings.results);\r\n    const resultsMapCount = resultsMap.length;\r\n\r\n    const rows = lines\r\n        .map((line) => line\r\n\r\n            // probably unhealthy replacing space in rank in order to make sure\r\n            // that it won't be broken into two cells\r\n            .replace(/([0-9]+)\\s(dan|kyu)/i, '$1_$2')\r\n\r\n            // split line to cells (consider tabs and spaces as separators by default)\r\n            .split(new RegExp(settings.cellSeparator))\r\n\r\n            // remove empty cells\r\n            .filter((cell) => cell.length > 0)\r\n        )\r\n\r\n        // filter out empty rows or rows starting with ';' (EGD/FFG comment)\r\n        .filter((cells) => cells.length > 0 && cells[0].indexOf(';') !== 0);\r\n\r\n    const tableWidth = rows.reduce((prev, line) => Math.max(prev, line.length), 0);\r\n    const tableModifier = settings.joinNames ? -1 : 0;\r\n    const joinNamePos = settings.placeColumn + 1;\r\n\r\n    let gamesInColumns = null;\r\n\r\n    // if columns rounds are provided then convert only them\r\n    if (typeof settings.roundsColumns === 'string') {\r\n        gamesInColumns = settings.roundsColumns.split(',').map(Number);\r\n    }\r\n\r\n    let previousPlace;\r\n\r\n    rows.forEach((cells, index) => {\r\n        const row = document.createElement('tr');\r\n        const width = cells.length;\r\n\r\n        if (!width) {\r\n            return;\r\n        }\r\n\r\n        if (index < settings.startingRow || width < (tableWidth + tableModifier)) {\r\n            let cell = document.createElement('td');\r\n\r\n            cell.setAttribute('colspan', tableWidth + tableModifier);\r\n            cell.textContent = cells.join(' ');\r\n\r\n            row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, -1);\r\n            row.appendChild(cell);\r\n\r\n        } else {\r\n\r\n            const place = parseInt(cells[settings.placeColumn], 10);\r\n\r\n            if (isNaN(place) && !previousPlace) {\r\n                cells.forEach((cellContent) => {\r\n                    let cell = document.createElement('td');\r\n\r\n                    cell.textContent = cellContent;\r\n\r\n                    row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, -1);\r\n                    row.appendChild(cell);\r\n                });\r\n\r\n            } else {\r\n                row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, previousPlace || place);\r\n\r\n                let opponents = [];\r\n\r\n                if (settings.joinNames) {\r\n                    cells.splice(joinNamePos, 2, `${cells[joinNamePos]}  ${cells[joinNamePos + 1]}`);\r\n                }\r\n\r\n                cells.forEach((cellContent, index) => {\r\n                    let cell = document.createElement('td');\r\n\r\n                    cell.textContent = cellContent.replace(/_/, ' ');\r\n\r\n                    if (!gamesInColumns || gamesInColumns.indexOf(index) >= 0) {\r\n                        for (let i = 0; i < resultsMapCount; i++) {\r\n                            let match = cellContent.match(resultsMap[i].regexp);\r\n\r\n                            if (!match) {\r\n                                continue;\r\n                            }\r\n\r\n                            let opponentPlacement = match[1];\r\n\r\n                            opponents.push(opponentPlacement);\r\n                            cell.setAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT, opponentPlacement);\r\n                            cell.setAttribute(DOM_ATTRIBUTES.GAME_RESULT, resultsMap[i].cls);\r\n                        }\r\n                    }\r\n\r\n                    row.appendChild(cell);\r\n                });\r\n\r\n                if (opponents.length) {\r\n                    row.setAttribute(DOM_ATTRIBUTES.OPPONENTS, opponents.join(','));\r\n                }\r\n\r\n                if (!previousPlace) {\r\n                    previousPlace = 2;\r\n                }  else {\r\n                    previousPlace += 1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        output.appendChild(row);\r\n    });\r\n\r\n    output.setAttribute(DOM_ATTRIBUTES.RESULT_TABLE, '');\r\n\r\n    return output;\r\n}\r\n",
    "'use strict';\r\n\r\n/**\r\n * Default settings of the plugin\r\n * @type {{prefixCls: string, showingDetailsCls: string, tableCls: string, gameCls: string, currentCls: string, results: {won: string, lost: string, jigo: string, unresolved: string}, startingRow: number, placeColumn: number, roundsColumns: null, rowTags: string, cellTags: string, rowSeparator: string, hovering: boolean, clicking: boolean}}\r\n */\r\nexport const DEFAULT_SETTINGS = {\r\n    prefixCls:     'go-results-',\r\n    rearrangedCls: 'rearranged',\r\n    tableCls:      'table',\r\n    gameCls:       'game',\r\n    currentCls:    'current',\r\n\r\n    results: {\r\n        won: '([0-9]+)\\\\+',\r\n        lost: '([0-9]+)\\\\-',\r\n        jigo: '([0-9]+)=',\r\n        unresolved: '([0-9]+)\\\\?'\r\n    },\r\n\r\n    startingRow: 0,\r\n    placeColumn: 0,\r\n    roundsColumns: null,\r\n\r\n    rowTags: 'tr',\r\n    cellTags: 'td,th',\r\n    cellSeparator: '[\\t ]+',\r\n    joinNames: true,\r\n\r\n    hovering:    true,\r\n    rearranging: true\r\n};\r\n\r\nconst CLASSES_TO_BE_PREFIXED = [\r\n    'rearrangedCls',\r\n    'tableCls',\r\n    'gameCls',\r\n    'currentCls'\r\n];\r\n\r\n/**\r\n * Names of attributes used in this plugin\r\n * @type {{RESULT_TABLE: string, SETTING_STARTING_ROW: string, SETTING_PLACE_COLUMN: string, SETTING_ROUNDS_COLUMNS: string, SETTING_REARRANGING: string, SETTING_HOVERING: string, PLAYER_PLACEMENT: string, OPPONENT_PLACEMENT: string, OPPONENTS: string, GAME_RESULT: string}}\r\n */\r\nexport const DOM_ATTRIBUTES = {\r\n    RESULT_TABLE:           'data-go-results',\r\n    SETTING_STARTING_ROW:   'data-go-starting-row',\r\n    SETTING_PLACE_COLUMN:   'data-go-place-column',\r\n    SETTING_ROUNDS_COLUMNS: 'data-go-rounds-columns',\r\n    SETTING_REARRANGING:    'data-go-rearranging',\r\n    SETTING_HOVERING:       'data-go-hovering',\r\n    PLAYER_PLACEMENT:       'data-go-place',\r\n    OPPONENT_PLACEMENT:     'data-go-opponent',\r\n    OPPONENTS:              'data-go-opponents',\r\n    GAME_RESULT:            'data-go-result'\r\n};\r\n\r\n/**\r\n * Transforms map of possible results into array of objects with regexp string\r\n * converted into RegExp objects.\r\n * @param {object} results\r\n * @returns {Array.<{cls: string, regexp: RegExp}>}\r\n */\r\nexport function toResultsWithRegExp(results) {\r\n    const map = [];\r\n\r\n    for (let cls in results) {\r\n        if (results.hasOwnProperty(cls)) {\r\n            map.push({\r\n                cls,\r\n                regexp: new RegExp(results[cls])\r\n            });\r\n        }\r\n    }\r\n\r\n    return map;\r\n}\r\n\r\n/**\r\n * Returns object with prefixed classes based on settings\r\n * @param {object} settings\r\n * @returns {{}}\r\n */\r\nexport function toPrefixedClasses(settings) {\r\n    let result = {};\r\n\r\n    CLASSES_TO_BE_PREFIXED.forEach((cls) => {\r\n        result[cls] = settings.prefixCls + settings[cls];\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Checks the element for 3 attributes and returns object with set appropriate\r\n * values\r\n * @param {HTMLElement} table\r\n * @returns {object}\r\n */\r\nexport function readTableSettingsFromDOM(table) {\r\n    const output = {};\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_PLACE_COLUMN)) {\r\n        output.placeColumn = Number(table.getAttribute(DOM_ATTRIBUTES.SETTING_PLACE_COLUMN));\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_STARTING_ROW)) {\r\n        output.startingRow = Number(table.getAttribute(DOM_ATTRIBUTES.SETTING_STARTING_ROW));\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_ROUNDS_COLUMNS)) {\r\n        output.roundsColumns = table.getAttribute(DOM_ATTRIBUTES.SETTING_ROUNDS_COLUMNS);\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_REARRANGING)) {\r\n        output.rearranging = table.getAttribute(DOM_ATTRIBUTES.SETTING_REARRANGING) !== 'false';\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_HOVERING)) {\r\n        output.hovering = table.getAttribute(DOM_ATTRIBUTES.SETTING_HOVERING) !== 'false';\r\n    }\r\n\r\n    return output;\r\n}",
    "'use strict';\r\n\r\n/**\r\n * Transforms array-like objects (such as arguments or node lists) into an array\r\n * @param {*} arrayLike\r\n * @returns {Array.<T>}\r\n */\r\nexport function asArray(arrayLike) {\r\n    return Array.prototype.slice.call(arrayLike);\r\n}\r\n\r\n/**\r\n * Returns new object containing keys only from defaultObj but values are taken\r\n * from if exist (starting from the last object provided)\r\n * @param {object} defaultObj\r\n * @param {Array.<object>} ...objects\r\n * @returns {object}\r\n */\r\nexport function defaults(defaultObj, ...objects) {\r\n    const overrides = objects\r\n        .filter((obj) => typeof obj === 'object')\r\n        .reverse();\r\n\r\n    const count = overrides.length;\r\n    const result = {};\r\n\r\n    mainLoop: for (let key in defaultObj) {\r\n        for (let i = 0; i < count; i++) {\r\n            if (overrides[i].hasOwnProperty(key)) {\r\n                result[key] = overrides[i][key];\r\n                continue mainLoop;\r\n            }\r\n        }\r\n\r\n        result[key] = defaultObj[key];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns new object that has merged properties from all provided objects.\r\n * Latest arguments overrides the earlier values.\r\n * @param {Array.<object>} objects\r\n * @returns {object}\r\n */\r\nexport function combine(...objects) {\r\n    const result = {};\r\n\r\n    objects.forEach((object) => {\r\n        for (let key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                result[key] = object[key];\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n}",
    "'use strict';\r\n\r\nimport Highlighter from './highlighter';\r\n\r\n/**\r\n * Class wrapper for highlighter\r\n * @module wrapper\r\n */\r\n\r\n/**\r\n * Creates new Go Results Highlighter\r\n * @param {HTMLElement} element - element where the highlighter should be bound\r\n * to, preferably a table or a pre element\r\n * @param {object} [settings] - configuration of the highlighter\r\n * @constructor\r\n */\r\nfunction GoResultsHighlighter(element, settings) {\r\n\r\n    // force new instance\r\n    if (!this instanceof GoResultsHighlighter) {\r\n        return new GoResultsHighlighter(element, settings);\r\n    }\r\n\r\n    const highlighter = new Highlighter(element, settings);\r\n\r\n    /**\r\n     * Highlights player and his/hers opponents\r\n     * @param {number|object} player - placement of the player or the object with\r\n     * properties containing player, rearrange and opponent fields\r\n     * @param {number|Array.<number>|boolean} [games] - opponent with whom the game should be\r\n     * @param {boolean} [rearrange] - whether to rearrange result rows\r\n     * highlighted\r\n     */\r\n    this.highlight = (player, games, rearrange) => {\r\n        if (typeof player === 'object') {\r\n            highlighter.highlight(player);\r\n\r\n        } else {\r\n\r\n            if (typeof games === 'boolean') {\r\n                rearrange = games;\r\n                games = null;\r\n            }\r\n\r\n            highlighter.highlight({ player, rearrange, games });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Changes current configuration of the highlighter\r\n     * @param {object} settings\r\n     */\r\n    this.configure = (settings) => {\r\n        highlighter.configure(settings);\r\n    };\r\n\r\n    /**\r\n     * Gets opponents for the player on provided place.\r\n     * @param {number} player - placement of player to get the list of opponents\r\n     * @returns {Array.<number>}\r\n     */\r\n    this.opponents = (player) => {\r\n        const entry = highlighter.map[player];\r\n\r\n        return entry ? entry.opponents.slice() : [];\r\n    };\r\n\r\n    Object.defineProperties(this, /** @lends module:wrapper~GoResultsHighlighter.prototype */ {\r\n\r\n        /**\r\n         * Contains reference to element with highlighter\r\n         * @type {HTMLElement}\r\n         * @readonly\r\n         */\r\n        element: getter(() => highlighter.element),\r\n\r\n        /**\r\n         * Informs whether the any player is highlighted\r\n         * @type {boolean}\r\n         * @readonly\r\n         */\r\n        isHighlighting: getter(() => highlighter.isHighlighting),\r\n\r\n        /**\r\n         * Informs whether the rows are rearranged to display results in compact\r\n         * mode\r\n         * @type {boolean}\r\n         * @readonly\r\n         */\r\n        isRearranged: getter(() => highlighter.isRearranged),\r\n\r\n        /**\r\n         * Contains placement of current highlighted player\r\n         * @type {number|null}\r\n         * @readonly\r\n         */\r\n        player: getter(() => highlighter.current || null),\r\n\r\n        /**\r\n         * Contains count of player rows\r\n         * @type {number}\r\n         * @readonly\r\n         */\r\n        players: getter(() => highlighter.players.length),\r\n\r\n        /**\r\n         * Contains list of highlighted games (placements of opponents)\r\n         * @type {Array.<number>}\r\n         * @readonly\r\n         */\r\n        games: getter(() => highlighter.games),\r\n\r\n        /**\r\n         * Contains current configuration of Go Results Highlighter\r\n         * @type {object}\r\n         * @readonly\r\n         */\r\n        configuration: getter(() => {\r\n            const originalResults = highlighter.settings.results;\r\n            const results = {};\r\n\r\n            for (let prop in originalResults) {\r\n                if (originalResults.hasOwnProperty(prop)) {\r\n                    results[prop] = originalResults[prop];\r\n                }\r\n            }\r\n\r\n            return {\r\n                startingRow: highlighter.settings.startingRow,\r\n                placeColumn: highlighter.settings.placeColumn,\r\n                roundsColumns: highlighter.settings.roundsColumns,\r\n                prefixCls: highlighter.settings.prefixCls,\r\n                rearrangedCls: highlighter.settings.rearrangedCls,\r\n                tableCls: highlighter.settings.tableCls,\r\n                gameCls: highlighter.settings.gameCls,\r\n                currentCls: highlighter.settings.currentCls,\r\n                rowTags: highlighter.settings.rowTags,\r\n                cellTags: highlighter.settings.cellTags,\r\n                cellSeparator: highlighter.settings.cellSeparator,\r\n                joinNames: highlighter.settings.joinNames,\r\n                results\r\n            };\r\n        }),\r\n\r\n        /**\r\n         * Informs whether the rearranging is enabled.\r\n         * @type {boolean}\r\n         */\r\n        rearranging: {\r\n            set: (value) => {\r\n                if (!value && highlighter.isRearranged) {\r\n                    highlighter.highlight(null);\r\n                }\r\n\r\n                highlighter.settings.rearranging = !!value;\r\n            },\r\n            get: () => highlighter.settings.rearranging,\r\n            configurable: false,\r\n            enumerable: true\r\n        },\r\n\r\n        /**\r\n         * Informs whether the hovering is enabled.\r\n         * @type {boolean}\r\n         */\r\n        hovering: {\r\n            set: (value) => highlighter.settings.hovering = !!value,\r\n            get: () => highlighter.settings.hovering,\r\n            configurable: false,\r\n            enumerable: true\r\n        }\r\n    });\r\n\r\n    highlighter.element.goResultsHighlighter = this;\r\n}\r\n\r\n/**\r\n * Helper function returning definition of read only getter defined in callback\r\n * @param {Function} callback\r\n * @returns {object}\r\n */\r\nfunction getter(callback) {\r\n    return {\r\n        get: callback,\r\n        enumerable: true,\r\n        configurable: false\r\n    };\r\n}\r\n\r\nexport default GoResultsHighlighter;"
  ]
}