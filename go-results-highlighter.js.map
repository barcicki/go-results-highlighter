{
  "version": 3,
  "sources": [
    "node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js",
    "fake_ff25dab8.js",
    "highlighter.js",
    "parser.js",
    "raw2table.js",
    "settings.js",
    "utils.js",
    "wrapper.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "go-results-highlighter",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\r\n\r\nimport GoResultsHighlighter from './lib/wrapper';\r\nimport { DOM_ATTRIBUTES } from './lib/settings';\r\nimport { asArray } from './lib/utils';\r\n\r\nfunction initialize() {\r\n    asArray(document.querySelectorAll(`[${DOM_ATTRIBUTES.RESULT_TABLE}]`))\r\n        .forEach((tableEl) => new GoResultsHighlighter(tableEl));\r\n}\r\n\r\nif (document.readyState === 'complete') {\r\n    initialize();\r\n} else {\r\n    document.addEventListener('DOMContentLoaded', initialize, false);\r\n}\r\n\r\nif (typeof jQuery !== 'undefined') {\r\n    jQuery.fn.goResultsHighlighter = function (options) {\r\n        this.each(function (index, element) {\r\n            let highlighter = new GoResultsHighlighter(element, options);\r\n\r\n            $(highlighter.element).data('GoResultsHighlighter', highlighter);\r\n        });\r\n        return this;\r\n    };\r\n}\r\n\r\nmodule.exports = GoResultsHighlighter;",
    "'use strict';\r\n\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toPrefixedClasses, readTableSettingsFromDOM } from './settings';\r\nimport parse from './parser';\r\nimport convert from './raw2table';\r\nimport { asArray, defaults } from './utils';\r\n\r\nexport default class GoResultsHighlighter {\r\n\r\n    /**\r\n     * Creates new instance of GoResultsHighlighter\r\n     *\r\n     * @param {HTMLElement} element - main element containing table with results\r\n     * @param {object} [settings] - plugin settings\r\n     * @param {number} [settings.column=0] - index of the column\r\n     * where the script should expect to find player's placement\r\n     * @param {number} [settings.row=0] - starting row with players\r\n     * @param {string} [settings.prefixCls='go-results-'] - css class prefix\r\n     * @param {string} [settings.gameCls='game'] - game cell class name\r\n     * @param {string} [settings.currentCls='current'] - selected row class name\r\n     * @param {object} [settings.results] - map with possible results, by default\r\n     * supports 4 options. Provide with \"className\" -> \"regexp\" pattern.\r\n     * @param {string} [settings.results.won='([0-9]+)\\\\+'] - default winning regexp\r\n     * @param {string} [settings.results.lost='([0-9]+)\\\\-'] - default losing regexp\r\n     * @param {string} [settings.results.jigo='([0-9]+)='] - default draw regexp\r\n     * @param {string} [settings.results.unresolved='([0-9]+)\\\\?] - default unresolved regexp\r\n     * @param {string} [settings.rowTags='tr'] - querySelection-compatible string\r\n     * with tags representing players' rows\r\n     * @param {string} [settings.cellTags='td,th'] - querySelection-compatible\r\n     * string with tags holding game results\r\n     */\r\n    constructor(element, settings) {\r\n        this.settings = defaults(DEFAULT_SETTINGS, readTableSettingsFromDOM(element), settings);\r\n\r\n        if (element instanceof HTMLPreElement) {\r\n            let table = convert(element.innerHTML, settings);\r\n            let parent = element.parentNode;\r\n\r\n            parent.insertBefore(table, element);\r\n            parent.removeChild(element);\r\n\r\n            this.element = table;\r\n        } else {\r\n            this.element = element;\r\n        }\r\n\r\n        if (!this.element.classList) {\r\n            // not supported\r\n            return;\r\n        }\r\n\r\n        this.createPlayersMap();\r\n        this.bindEvents();\r\n\r\n        this.element.classList.add(this.settings.prefixCls + this.settings.tableCls);\r\n\r\n        this.current = null;\r\n        this.games = [];\r\n        this.isRearranged = false;\r\n        this.isHighlighting = false;\r\n    }\r\n\r\n    /**\r\n     * Creates players map\r\n     */\r\n    createPlayersMap() {\r\n        this.map = parse(this.element, this.settings);\r\n        this.players = [];\r\n\r\n        for (let placement in this.map) {\r\n            if (this.map.hasOwnProperty(placement)) {\r\n                this.players.push(this.map[placement]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks player and his opponents highlighted.\r\n     * @param {object|null} [settings] - highlighting settings or player to be highlighted\r\n     * @param {number} [settings.player] - player whose opponents should be\r\n     * highlighted\r\n     * @param {boolean} [settings.rearrange=false] - whether the table should be\r\n     * rearranged to display results in compact size\r\n     * @param {Array.<number>} [settings.games] - the opponent whose game with the\r\n     * player should be highlighted\r\n     */\r\n    highlight(settings) {\r\n        if (!settings) {\r\n            settings = {};\r\n        }\r\n\r\n        let playerPlace = settings.player;\r\n        let rearrange = settings.rearrange === true;\r\n        let gamesToHighlight = settings.games;\r\n\r\n        const player = this.map[playerPlace];\r\n        const classes = toPrefixedClasses(this.settings);\r\n\r\n        // if table is already rearranged then transform it back to default state\r\n        if (this.isRearranged) {\r\n            restoreNaturalOrder(this.players);\r\n        }\r\n\r\n        // rearrange the table if player and appropriate setting is provided\r\n        if (player && rearrange) {\r\n            rearrangeOrder(player, player.opponents.map((opponentPlace) => this.map[opponentPlace]));\r\n\r\n            this.element.classList.add(classes.rearrangedCls);\r\n            this.isRearranged = true;\r\n        } else {\r\n            this.element.classList.remove(classes.rearrangedCls);\r\n            this.isRearranged = false;\r\n        }\r\n\r\n        const markedGames = asArray(this.element.querySelectorAll('.' + classes.gameCls));\r\n        const markedRow = this.element.querySelector('.' + classes.currentCls);\r\n        const markedRowPlacement = markedRow ? markedRow.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT) : null;\r\n        const markedPlayer = markedRowPlacement ? this.map[markedRowPlacement] : null;\r\n        const mark = (player, active) => {\r\n            const method = active ? 'add' : 'remove';\r\n\r\n            player.row.classList[method](classes.currentCls);\r\n\r\n            player.opponents.forEach((opponentPlace) => {\r\n                let opponent = this.map[opponentPlace];\r\n\r\n                opponent.row.classList[method](this.settings.prefixCls + player.games[opponentPlace].cls);\r\n            });\r\n        };\r\n\r\n        // remove any visible game markings\r\n        markedGames.forEach((gameCell) => {\r\n            gameCell.classList.remove(classes.gameCls);\r\n        });\r\n\r\n        // unmark player if necessary\r\n        if (markedPlayer && markedPlayer !== player) {\r\n            mark(markedPlayer, false);\r\n        }\r\n\r\n        // mark the player if not already marked\r\n        if (player && player !== markedPlayer) {\r\n            mark(player, true);\r\n        }\r\n\r\n        // clear list of highlighted games\r\n        this.games.length = 0;\r\n\r\n        if (player) {\r\n            if (typeof gamesToHighlight === 'number') {\r\n                gamesToHighlight = [gamesToHighlight];\r\n            }\r\n\r\n            if (gamesToHighlight && typeof gamesToHighlight.length === 'number') {\r\n                gamesToHighlight.forEach((opponentPlace) => {\r\n                    let opponent = this.map[opponentPlace];\r\n                    let game = player.games[opponentPlace];\r\n\r\n                    if (opponent && game) {\r\n                        game.cell.classList.add(classes.gameCls);\r\n                        opponent.games[playerPlace].cell.classList.add(classes.gameCls);\r\n                        this.games.push(opponentPlace);\r\n                    }\r\n                });\r\n            } else if (this.isRearranged) {\r\n                player.opponents.forEach((opponent) => {\r\n                    this.map[opponent].games[playerPlace].cell.classList.add(classes.gameCls);\r\n                    this.games.push(opponent);\r\n                });\r\n            }\r\n\r\n            this.current = playerPlace;\r\n            this.isHighlighting = true;\r\n        } else {\r\n            this.current = null;\r\n            this.isHighlighting = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change settings\r\n     * @param {object} settings\r\n     */\r\n    configure(settings) {\r\n\r\n        // remove any highlighting\r\n        this.highlight(null);\r\n\r\n        // remove class name added to the table\r\n        this.element.classList.remove(this.settings.prefixCls + this.settings.tableCls);\r\n\r\n        // update settings\r\n        this.settings = defaults(this.settings, settings);\r\n\r\n        // create new player map (parse rows)\r\n        this.createPlayersMap();\r\n\r\n        // add new class name to the table\r\n        this.element.classList.add(this.settings.prefixCls + this.settings.tableCls);\r\n    }\r\n\r\n    /**\r\n     * Binds touchend, click, mouseover and mouseout events listeners to the element.\r\n     */\r\n    bindEvents() {\r\n        let hasTouchMoved = false;\r\n\r\n        this.element.addEventListener('touchstart', () => {\r\n            hasTouchMoved = false;\r\n        });\r\n\r\n        this.element.addEventListener('touchmove', () => {\r\n            hasTouchMoved = true;\r\n        });\r\n\r\n        this.element.addEventListener('touchend', (event) => {\r\n            if (hasTouchMoved || (this.settings.rearranging === false && this.settings.hovering === false)) {\r\n                return;\r\n            }\r\n\r\n            let { target, player, games } = fetchInformationAboutTarget(event.target);\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            let rearrange = false;\r\n            let lastTargetPos;\r\n\r\n            if (this.current === player) {\r\n                if (!this.settings.rearranging || !this.settings.hovering) {\r\n                    player = null;\r\n                }\r\n                rearrange = !this.isRearranged;\r\n\r\n            } else if (this.isRearranged || !this.settings.hovering) {\r\n                rearrange = true;\r\n            }\r\n\r\n            if (rearrange) {\r\n                lastTargetPos = target.getBoundingClientRect().top;\r\n            }\r\n\r\n            this.highlight({ player, games, rearrange });\r\n\r\n            if (lastTargetPos) {\r\n                updateTopPosition(target, lastTargetPos);\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.element.addEventListener('click', (event) => {\r\n            if (this.settings.rearranging === false) {\r\n                return;\r\n            }\r\n\r\n            let { target, player, games } = fetchInformationAboutTarget(event.target);\r\n            let rearrange = false;\r\n            let lastTargetPos;\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            if (!this.isRearranged || target.properNextSibling) {\r\n                rearrange = true;\r\n\r\n            } else if (!this.settings.hovering) {\r\n                player = null;\r\n            }\r\n\r\n            if (rearrange) {\r\n                lastTargetPos = target.getBoundingClientRect().top;\r\n            }\r\n\r\n            this.highlight({ player, games, rearrange });\r\n\r\n            if (lastTargetPos) {\r\n                updateTopPosition(target, lastTargetPos);\r\n            }\r\n        });\r\n\r\n        this.element.addEventListener('mouseover', (event) => {\r\n            if (this.settings.hovering === false) {\r\n                return;\r\n            }\r\n\r\n            let { player, games } = fetchInformationAboutTarget(event.target);\r\n            let rearrange = this.isRearranged;\r\n\r\n            if (!player) {\r\n                return;\r\n            }\r\n\r\n            if (this.isRearranged) {\r\n                if ((!games || player !== this.current) && this.games.length === this.map[this.current].opponents.length) {\r\n                    return;\r\n                }\r\n\r\n                if (player !== this.current) {\r\n                    player = this.current;\r\n                    games = null;\r\n                }\r\n            }\r\n\r\n            this.highlight({ player, rearrange, games });\r\n        }, false);\r\n\r\n        this.element.addEventListener('mouseout', (event) => {\r\n            if (this.settings.hovering === false) {\r\n                return;\r\n            }\r\n\r\n            let target = event.relatedTarget;\r\n\r\n            while (target && target !== document && target !== this.element) {\r\n                target = target.parentNode;\r\n            }\r\n\r\n            // if new hovered element is outside the table then remove all\r\n            // selections unless the table is rearranged - then only highlight\r\n            // all games\r\n            if (target !== this.element) {\r\n                if (this.isRearranged && this.games.length !== this.map[this.current].opponents.length) {\r\n                    this.highlight({ player: this.current, rearrange: true });\r\n                } else if (!this.isRearranged) {\r\n                    this.highlight(null);\r\n                }\r\n            }\r\n        }, false);\r\n    }\r\n}\r\n\r\n/**\r\n * Compare current target's top position with previous value and scroll window\r\n * to previous value if it differs\r\n * @param {HTMLElement} target\r\n * @param {number} previousTop\r\n */\r\nfunction updateTopPosition(target, previousTop) {\r\n    let diff = target.getBoundingClientRect().top - previousTop;\r\n\r\n    if (Math.abs(diff) > 10) {\r\n        window.scrollBy(0, diff);\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves information about player and opponent placement from provided element\r\n * or its parents. Returns also the row with player placement information.\r\n * @param {HTMLElement} target - target of the event\r\n * @returns {object}\r\n */\r\nfunction fetchInformationAboutTarget(target) {\r\n    var result = {\r\n        player: null,\r\n        games: null,\r\n        target: null\r\n    };\r\n\r\n    // fetch information about hovered element\r\n    while (target && target !== document) {\r\n        let opponentGridPlacement = target.getAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT);\r\n        let playerGridPlacement = target.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT);\r\n\r\n        // game cell?\r\n        if (opponentGridPlacement) {\r\n            result.games = Number(opponentGridPlacement);\r\n        }\r\n\r\n        // player row? no further search is necessary\r\n        if (playerGridPlacement) {\r\n            result.player = Number(playerGridPlacement);\r\n            break;\r\n        }\r\n\r\n        target = target.parentNode;\r\n    }\r\n\r\n    result.target = target;\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Restores default order of rows in the table\r\n * @param {Array.<object>} players - list of mapping data for all rows\r\n */\r\nfunction restoreNaturalOrder(players) {\r\n    players\r\n        .filter((player) => player.row.properNextSibling)\r\n        .reverse()\r\n        .forEach((player) => {\r\n            if (player.row.properNextSibling === -1) {\r\n                player.row.parentNode.appendChild(player.row);\r\n            } else {\r\n                player.row.parentNode.insertBefore(player.row, player.row.properNextSibling);\r\n            }\r\n            player.row.properNextSibling = null;\r\n        });\r\n}\r\n\r\n/**\r\n * Rearranges the rows in a table\r\n * @param {object} player - player mapping data\r\n * @param {Array.<object>} opponents - list of opponents mapping data\r\n */\r\nfunction rearrangeOrder(player, opponents) {\r\n    const parent = player.row.parentNode;\r\n    let after = player.row.nextElementSibling;\r\n\r\n    opponents.forEach((opponent) => {\r\n        opponent.row.properNextSibling = opponent.row.nextElementSibling || -1;\r\n\r\n        if (opponent.tournamentPlace < player.tournamentPlace) {\r\n            parent.insertBefore(opponent.row, player.row);\r\n        } else {\r\n            parent.insertBefore(opponent.row, after);\r\n            after = opponent.row.nextElementSibling;\r\n        }\r\n    });\r\n}\r\n\r\nGoResultsHighlighter.DEFAULT_SETTINGS = DEFAULT_SETTINGS;\r\n",
    "'use strict';\r\n\r\nimport { asArray, defaults } from './utils';\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toResultsWithRegExp } from './settings';\r\n\r\nfunction writeGridPlacement(row, placement) {\r\n    row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, placement);\r\n}\r\n\r\n/**\r\n * Traverse provided table and create results map\r\n * @param {HTMLElement} table - table results container\r\n * @param {object} [config] - settings for parser\r\n * @param {string} [config.rowTags]\r\n * @param {string} [config.cellTags]\r\n * @param {object} [config.results]\r\n * @param {object} [config.placeColumn]\r\n * @param {object} [config.roundsColumns]\r\n * @param {object} [config.startingRow]\r\n * @returns {object}\r\n */\r\nexport default function parse(table, config) {\r\n    const settings = defaults(DEFAULT_SETTINGS, config);\r\n    const rows = asArray(table.querySelectorAll(settings.rowTags));\r\n    const resultsMap = toResultsWithRegExp(settings.results);\r\n    const resultsMapCount = resultsMap.length;\r\n    const results = {};\r\n\r\n    function parseGames(player, cells) {\r\n        // if columns rounds are provided then parse only them\r\n        if (typeof settings.roundsColumns === 'string') {\r\n            cells = settings.roundsColumns\r\n                .split(',')\r\n                .map((round) => {\r\n                    return cells[Number(round)];\r\n                });\r\n        }\r\n\r\n        cells.forEach((cell) => {\r\n            let opponentPlace;\r\n            let resultCls;\r\n\r\n\r\n            if (cell.hasAttribute(DOM_ATTRIBUTES.GAME_RESULT) && cell.hasAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT)) {\r\n                opponentPlace = Number(cell.getAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT));\r\n                resultCls = cell.getAttribute(DOM_ATTRIBUTES.GAME_RESULT);\r\n\r\n            } else {\r\n                for (let i = 0; i < resultsMapCount; i++) {\r\n                    let match = cell.textContent.match(resultsMap[i].regexp);\r\n\r\n                    if (!match) {\r\n                        continue;\r\n                    }\r\n\r\n                    opponentPlace = Number(match[1]);\r\n                    resultCls = resultsMap[i].cls;\r\n\r\n                    cell.setAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT, opponentPlace);\r\n                    cell.setAttribute(DOM_ATTRIBUTES.GAME_RESULT, resultsMap[i].cls);\r\n                }\r\n\r\n                if (!opponentPlace) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            player.games[opponentPlace] = {\r\n                cell,\r\n                cls: resultCls\r\n            };\r\n\r\n            player.opponents.push(opponentPlace);\r\n        });\r\n    }\r\n\r\n    let lastTournamentPlacement;\r\n    let lastGridPlacement;\r\n\r\n    rows.forEach((row, index) => {\r\n        if (index < settings.startingRow) {\r\n            return;\r\n        }\r\n\r\n        const cells = asArray(row.querySelectorAll(settings.cellTags));\r\n\r\n        // assign default place\r\n        let gridPlacement = -1;\r\n\r\n        // no cells? unlikely to be a result row\r\n        if (!cells.length || !cells[settings.placeColumn]) {\r\n            writeGridPlacement(row, gridPlacement);\r\n            return;\r\n        }\r\n\r\n        let tournamentPlacement = parseInt(cells[settings.placeColumn].textContent, 10);\r\n\r\n        const player = {\r\n            tournamentPlace: -1,\r\n            row,\r\n            games: {},\r\n            opponents: []\r\n        };\r\n\r\n        if (row.hasAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT)) {\r\n            gridPlacement = Number(row.getAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT));\r\n\r\n        } else {\r\n\r\n            // if no player has been mapped\r\n            if (!lastGridPlacement) {\r\n\r\n                // most probably not a result row\r\n                if (isNaN(tournamentPlacement)) {\r\n                    writeGridPlacement(row, gridPlacement);\r\n                    return;\r\n                }\r\n\r\n                // assign tournament if defined (possibly showing an extract from greater table)\r\n                gridPlacement = tournamentPlacement || 1;\r\n            } else {\r\n                gridPlacement = lastGridPlacement + 1;\r\n            }\r\n\r\n            // assumption: if place is not provided then it's an ex aequo case but\r\n            // we need to set a lower place nonetheless\r\n            if (!tournamentPlacement) {\r\n                tournamentPlacement = lastTournamentPlacement ? lastTournamentPlacement : 1;\r\n\r\n            } else if (tournamentPlacement <= lastTournamentPlacement) {\r\n                tournamentPlacement = lastTournamentPlacement;\r\n            }\r\n\r\n            writeGridPlacement(row, gridPlacement);\r\n        }\r\n\r\n        if (gridPlacement == -1) {\r\n            return;\r\n        }\r\n\r\n        parseGames(player, cells);\r\n\r\n        player.tournamentPlace = tournamentPlacement;\r\n        player.opponents.sort((a, b) => a > b ? 1 : -1);\r\n\r\n        results[gridPlacement] = player;\r\n\r\n        lastTournamentPlacement = tournamentPlacement;\r\n        lastGridPlacement = gridPlacement;\r\n    });\r\n\r\n    return results;\r\n}",
    "'use strict';\r\n\r\nimport { DEFAULT_SETTINGS, DOM_ATTRIBUTES, toResultsWithRegExp } from './settings';\r\nimport { defaults } from './utils';\r\n\r\n/**\r\n * Converts raw results string into table with rows and cells.\r\n * Returns null if not valid input.\r\n * @param {string} rawResults\r\n * @param {object} [config]\r\n * @param {number} [config.startingRow=0] - informs where is the first row with results\r\n * @param {number} [config.placeColumn=0] - informs in which column is the place located\r\n * @param {string} [config.roundsColumns] - comma separated list of columns where game results are located\r\n * @param {string} [config.cellSeparator='[\\t ]+'] - separated used to divide rows into cells\r\n * @param {boolean} [config.joinNames=true] - joins two consecutive cells after the place column into one cell\r\n * @returns {HTMLElement|null}\r\n */\r\nexport default function convertRawResultsToTable(rawResults, config) {\r\n    const output = document.createElement('table');\r\n\r\n    if (!rawResults) {\r\n        return output;\r\n    }\r\n\r\n    const settings = defaults(DEFAULT_SETTINGS, config);\r\n    const lines = rawResults.split(/\\r\\n|\\n/);\r\n\r\n    if (lines.length <= 2 && !lines[0] && !lines[1]) {\r\n        return output;\r\n    }\r\n\r\n    const resultsMap = toResultsWithRegExp(settings.results);\r\n    const resultsMapCount = resultsMap.length;\r\n\r\n    const rows = lines\r\n        .map((line) => line\r\n\r\n            // probably unhealthy replacing space in rank in order to make sure\r\n            // that it won't be broken into two cells\r\n            .replace(/([0-9]+)\\s(dan|kyu)/i, '$1_$2')\r\n\r\n            // split line to cells (consider tabs and spaces as separators by default)\r\n            .split(new RegExp(settings.cellSeparator))\r\n\r\n            // remove empty cells\r\n            .filter((cell) => cell.length > 0)\r\n        )\r\n\r\n        // filter out empty rows or rows starting with ';' (EGD/FFG comment)\r\n        .filter((cells) => cells.length > 0 && cells[0].indexOf(';') !== 0);\r\n\r\n    const tableWidth = rows.reduce((prev, line) => Math.max(prev, line.length), 0);\r\n    const tableModifier = settings.joinNames ? -1 : 0;\r\n    const joinNamePos = settings.placeColumn + 1;\r\n\r\n    let gamesInColumns = null;\r\n\r\n    // if columns rounds are provided then convert only them\r\n    if (typeof settings.roundsColumns === 'string') {\r\n        gamesInColumns = settings.roundsColumns.split(',').map(Number);\r\n    }\r\n\r\n    let previousPlace;\r\n\r\n    rows.forEach((cells, index) => {\r\n        const row = document.createElement('tr');\r\n        const width = cells.length;\r\n\r\n        if (!width) {\r\n            return;\r\n        }\r\n\r\n        if (index < settings.startingRow || width < (tableWidth + tableModifier)) {\r\n            let cell = document.createElement('td');\r\n\r\n            cell.setAttribute('colspan', tableWidth + tableModifier);\r\n            cell.textContent = cells.join(' ');\r\n\r\n            row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, -1);\r\n            row.appendChild(cell);\r\n\r\n        } else {\r\n\r\n            const place = parseInt(cells[settings.placeColumn], 10);\r\n\r\n            if (isNaN(place) && !previousPlace) {\r\n                cells.forEach((cellContent) => {\r\n                    let cell = document.createElement('td');\r\n\r\n                    cell.textContent = cellContent;\r\n\r\n                    row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, -1);\r\n                    row.appendChild(cell);\r\n                });\r\n\r\n            } else {\r\n                row.setAttribute(DOM_ATTRIBUTES.PLAYER_PLACEMENT, previousPlace || place);\r\n\r\n                let opponents = [];\r\n\r\n                if (settings.joinNames) {\r\n                    cells.splice(joinNamePos, 2, `${cells[joinNamePos]}  ${cells[joinNamePos + 1]}`);\r\n                }\r\n\r\n                cells.forEach((cellContent, index) => {\r\n                    let cell = document.createElement('td');\r\n\r\n                    cell.textContent = cellContent.replace(/_/, ' ');\r\n\r\n                    if (!gamesInColumns || gamesInColumns.indexOf(index) >= 0) {\r\n                        for (let i = 0; i < resultsMapCount; i++) {\r\n                            let match = cellContent.match(resultsMap[i].regexp);\r\n\r\n                            if (!match) {\r\n                                continue;\r\n                            }\r\n\r\n                            let opponentPlacement = match[1];\r\n\r\n                            opponents.push(opponentPlacement);\r\n                            cell.setAttribute(DOM_ATTRIBUTES.OPPONENT_PLACEMENT, opponentPlacement);\r\n                            cell.setAttribute(DOM_ATTRIBUTES.GAME_RESULT, resultsMap[i].cls);\r\n                        }\r\n                    }\r\n\r\n                    row.appendChild(cell);\r\n                });\r\n\r\n                if (opponents.length) {\r\n                    row.setAttribute(DOM_ATTRIBUTES.OPPONENTS, opponents.join(','));\r\n                }\r\n\r\n                if (!previousPlace) {\r\n                    previousPlace = 2;\r\n                }  else {\r\n                    previousPlace += 1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        output.appendChild(row);\r\n    });\r\n\r\n    output.setAttribute(DOM_ATTRIBUTES.RESULT_TABLE, '');\r\n\r\n    return output;\r\n}\r\n",
    "'use strict';\r\n\r\n/**\r\n * Default settings of the plugin\r\n * @type {{prefixCls: string, showingDetailsCls: string, tableCls: string, gameCls: string, currentCls: string, results: {won: string, lost: string, jigo: string, unresolved: string}, startingRow: number, placeColumn: number, roundsColumns: null, rowTags: string, cellTags: string, rowSeparator: string, hovering: boolean, clicking: boolean}}\r\n */\r\nexport const DEFAULT_SETTINGS = {\r\n    prefixCls:     'go-results-',\r\n    rearrangedCls: 'rearranged',\r\n    tableCls:      'table',\r\n    gameCls:       'game',\r\n    currentCls:    'current',\r\n\r\n    results: {\r\n        won: '([0-9]+)\\\\+',\r\n        lost: '([0-9]+)\\\\-',\r\n        jigo: '([0-9]+)=',\r\n        unresolved: '([0-9]+)\\\\?'\r\n    },\r\n\r\n    startingRow: 0,\r\n    placeColumn: 0,\r\n    roundsColumns: null,\r\n\r\n    rowTags: 'tr',\r\n    cellTags: 'td,th',\r\n    cellSeparator: '[\\t ]+',\r\n    joinNames: true,\r\n\r\n    hovering:    true,\r\n    rearranging: true\r\n};\r\n\r\nconst CLASSES_TO_BE_PREFIXED = [\r\n    'rearrangedCls',\r\n    'tableCls',\r\n    'gameCls',\r\n    'currentCls'\r\n];\r\n\r\n/**\r\n * Names of attributes used in this plugin\r\n * @type {{RESULT_TABLE: string, SETTING_STARTING_ROW: string, SETTING_PLACE_COLUMN: string, SETTING_ROUNDS_COLUMNS: string, SETTING_REARRANGING: string, SETTING_HOVERING: string, PLAYER_PLACEMENT: string, OPPONENT_PLACEMENT: string, OPPONENTS: string, GAME_RESULT: string}}\r\n */\r\nexport const DOM_ATTRIBUTES = {\r\n    RESULT_TABLE:           'data-go-results',\r\n    SETTING_STARTING_ROW:   'data-go-starting-row',\r\n    SETTING_PLACE_COLUMN:   'data-go-place-column',\r\n    SETTING_ROUNDS_COLUMNS: 'data-go-rounds-columns',\r\n    SETTING_REARRANGING:    'data-go-rearranging',\r\n    SETTING_HOVERING:       'data-go-hovering',\r\n    PLAYER_PLACEMENT:       'data-go-place',\r\n    OPPONENT_PLACEMENT:     'data-go-opponent',\r\n    OPPONENTS:              'data-go-opponents',\r\n    GAME_RESULT:            'data-go-result'\r\n};\r\n\r\n/**\r\n * Transforms map of possible results into array of objects with regexp string\r\n * converted into RegExp objects.\r\n * @param {object} results\r\n * @returns {Array.<{cls: string, regexp: RegExp}>}\r\n */\r\nexport function toResultsWithRegExp(results) {\r\n    const map = [];\r\n\r\n    for (let cls in results) {\r\n        if (results.hasOwnProperty(cls)) {\r\n            map.push({\r\n                cls,\r\n                regexp: new RegExp(results[cls])\r\n            });\r\n        }\r\n    }\r\n\r\n    return map;\r\n}\r\n\r\n/**\r\n * Returns object with prefixed classes based on settings\r\n * @param {object} settings\r\n * @returns {{}}\r\n */\r\nexport function toPrefixedClasses(settings) {\r\n    let result = {};\r\n\r\n    CLASSES_TO_BE_PREFIXED.forEach((cls) => {\r\n        result[cls] = settings.prefixCls + settings[cls];\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Checks the element for 3 attributes and returns object with set appropriate\r\n * values\r\n * @param {HTMLElement} table\r\n * @returns {object}\r\n */\r\nexport function readTableSettingsFromDOM(table) {\r\n    const output = {};\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_PLACE_COLUMN)) {\r\n        output.placeColumn = Number(table.getAttribute(DOM_ATTRIBUTES.SETTING_PLACE_COLUMN));\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_STARTING_ROW)) {\r\n        output.startingRow = Number(table.getAttribute(DOM_ATTRIBUTES.SETTING_STARTING_ROW));\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_ROUNDS_COLUMNS)) {\r\n        output.roundsColumns = table.getAttribute(DOM_ATTRIBUTES.SETTING_ROUNDS_COLUMNS);\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_REARRANGING)) {\r\n        output.rearranging = table.getAttribute(DOM_ATTRIBUTES.SETTING_REARRANGING) !== 'false';\r\n    }\r\n\r\n    if (table.hasAttribute(DOM_ATTRIBUTES.SETTING_HOVERING)) {\r\n        output.hovering = table.getAttribute(DOM_ATTRIBUTES.SETTING_HOVERING) !== 'false';\r\n    }\r\n\r\n    return output;\r\n}",
    "'use strict';\r\n\r\n/**\r\n * Transforms array-like objects (such as arguments or node lists) into an array\r\n * @param {*} arrayLike\r\n * @returns {Array.<T>}\r\n */\r\nexport function asArray(arrayLike) {\r\n    return Array.prototype.slice.call(arrayLike);\r\n}\r\n\r\n/**\r\n * Returns new object containing keys only from defaultObj but values are taken\r\n * from if exist (starting from the last object provided)\r\n * @param {object} defaultObj\r\n * @param {Array.<object>} ...objects\r\n * @returns {object}\r\n */\r\nexport function defaults(defaultObj, ...objects) {\r\n    const overrides = objects\r\n        .filter((obj) => typeof obj === 'object')\r\n        .reverse();\r\n\r\n    const count = overrides.length;\r\n    const result = {};\r\n\r\n    mainLoop: for (let key in defaultObj) {\r\n        for (let i = 0; i < count; i++) {\r\n            if (overrides[i].hasOwnProperty(key)) {\r\n                result[key] = overrides[i][key];\r\n                continue mainLoop;\r\n            }\r\n        }\r\n\r\n        result[key] = defaultObj[key];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns new object that has merged properties from all provided objects.\r\n * Latest arguments overrides the earlier values.\r\n * @param {Array.<object>} objects\r\n * @returns {object}\r\n */\r\nexport function combine(...objects) {\r\n    const result = {};\r\n\r\n    objects.forEach((object) => {\r\n        for (let key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                result[key] = object[key];\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n}",
    "'use strict';\r\n\r\nimport Highlighter from './highlighter';\r\n\r\n/**\r\n * Class wrapper for highlighter\r\n * @module wrapper\r\n */\r\n\r\n/**\r\n * Creates new Go Results Highlighter\r\n * @param {HTMLElement} element - element where the highlighter should be bound\r\n * to, preferably a table or a pre element\r\n * @param {object} [settings] - configuration of the highlighter\r\n * @constructor\r\n */\r\nfunction GoResultsHighlighter(element, settings) {\r\n\r\n    // force new instance\r\n    if (!(this instanceof GoResultsHighlighter)) {\r\n        return new GoResultsHighlighter(element, settings);\r\n    }\r\n\r\n    const highlighter = new Highlighter(element, settings);\r\n\r\n    /**\r\n     * Highlights player and his/hers opponents\r\n     * @param {number|object} player - placement of the player or the object with\r\n     * properties containing player, rearrange and opponent fields\r\n     * @param {number|Array.<number>|boolean} [games] - opponent with whom the game should be\r\n     * @param {boolean} [rearrange] - whether to rearrange result rows\r\n     * highlighted\r\n     */\r\n    this.highlight = (player, games, rearrange) => {\r\n        if (typeof player === 'object') {\r\n            highlighter.highlight(player);\r\n\r\n        } else {\r\n\r\n            if (typeof games === 'boolean') {\r\n                rearrange = games;\r\n                games = null;\r\n            }\r\n\r\n            highlighter.highlight({ player, rearrange, games });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Changes current configuration of the highlighter\r\n     * @param {object} settings\r\n     */\r\n    this.configure = (settings) => {\r\n        highlighter.configure(settings);\r\n    };\r\n\r\n    /**\r\n     * Gets opponents for the player on provided place.\r\n     * @param {number} player - placement of player to get the list of opponents\r\n     * @returns {Array.<number>}\r\n     */\r\n    this.opponents = (player) => {\r\n        const entry = highlighter.map[player];\r\n\r\n        return entry ? entry.opponents.slice() : [];\r\n    };\r\n\r\n    Object.defineProperties(this, /** @lends module:wrapper~GoResultsHighlighter.prototype */ {\r\n\r\n        /**\r\n         * Contains reference to element with highlighter\r\n         * @type {HTMLElement}\r\n         * @readonly\r\n         */\r\n        element: getter(() => highlighter.element),\r\n\r\n        /**\r\n         * Informs whether the any player is highlighted\r\n         * @type {boolean}\r\n         * @readonly\r\n         */\r\n        isHighlighting: getter(() => highlighter.isHighlighting),\r\n\r\n        /**\r\n         * Informs whether the rows are rearranged to display results in compact\r\n         * mode\r\n         * @type {boolean}\r\n         * @readonly\r\n         */\r\n        isRearranged: getter(() => highlighter.isRearranged),\r\n\r\n        /**\r\n         * Contains placement of current highlighted player\r\n         * @type {number|null}\r\n         * @readonly\r\n         */\r\n        player: getter(() => highlighter.current || null),\r\n\r\n        /**\r\n         * Contains count of player rows\r\n         * @type {number}\r\n         * @readonly\r\n         */\r\n        players: getter(() => highlighter.players.length),\r\n\r\n        /**\r\n         * Contains list of highlighted games (placements of opponents)\r\n         * @type {Array.<number>}\r\n         * @readonly\r\n         */\r\n        games: getter(() => highlighter.games),\r\n\r\n        /**\r\n         * Contains current configuration of Go Results Highlighter\r\n         * @type {object}\r\n         * @readonly\r\n         */\r\n        configuration: getter(() => {\r\n            const originalResults = highlighter.settings.results;\r\n            const results = {};\r\n\r\n            for (let prop in originalResults) {\r\n                if (originalResults.hasOwnProperty(prop)) {\r\n                    results[prop] = originalResults[prop];\r\n                }\r\n            }\r\n\r\n            return {\r\n                startingRow: highlighter.settings.startingRow,\r\n                placeColumn: highlighter.settings.placeColumn,\r\n                roundsColumns: highlighter.settings.roundsColumns,\r\n                prefixCls: highlighter.settings.prefixCls,\r\n                rearrangedCls: highlighter.settings.rearrangedCls,\r\n                tableCls: highlighter.settings.tableCls,\r\n                gameCls: highlighter.settings.gameCls,\r\n                currentCls: highlighter.settings.currentCls,\r\n                rowTags: highlighter.settings.rowTags,\r\n                cellTags: highlighter.settings.cellTags,\r\n                cellSeparator: highlighter.settings.cellSeparator,\r\n                joinNames: highlighter.settings.joinNames,\r\n                results\r\n            };\r\n        }),\r\n\r\n        /**\r\n         * Informs whether the rearranging is enabled.\r\n         * @type {boolean}\r\n         */\r\n        rearranging: {\r\n            set: (value) => {\r\n                if (!value && highlighter.isRearranged) {\r\n                    highlighter.highlight(null);\r\n                }\r\n\r\n                highlighter.settings.rearranging = !!value;\r\n            },\r\n            get: () => highlighter.settings.rearranging,\r\n            configurable: false,\r\n            enumerable: true\r\n        },\r\n\r\n        /**\r\n         * Informs whether the hovering is enabled.\r\n         * @type {boolean}\r\n         */\r\n        hovering: {\r\n            set: (value) => highlighter.settings.hovering = !!value,\r\n            get: () => highlighter.settings.hovering,\r\n            configurable: false,\r\n            enumerable: true\r\n        }\r\n    });\r\n\r\n    highlighter.element.goResultsHighlighter = this;\r\n}\r\n\r\n/**\r\n * Helper function returning definition of read only getter defined in callback\r\n * @param {Function} callback\r\n * @returns {object}\r\n */\r\nfunction getter(callback) {\r\n    return {\r\n        get: callback,\r\n        enumerable: true,\r\n        configurable: false\r\n    };\r\n}\r\n\r\nexport default GoResultsHighlighter;"
  ]
}